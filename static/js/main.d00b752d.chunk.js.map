{"version":3,"sources":["components/PopupButton.jsx","components/PopupDiv.jsx","components/ActionType.jsx","functions/formatPrice.js","functions/timeframes.jsx","functions/CoinTicker.jsx","functions/uniqueByKeepFirst.jsx","functions/ProfitMessage.jsx","components/Coin/Coin.jsx","components/CoinList/CoinList.jsx","components/ExchangeHeader/ExchangeHeader.jsx","components/BuyDialog/BuyDialog.jsx","components/BuyNewDialog/BuyNewDialog.jsx","components/SellDialog/SellDialog.jsx","components/LoadingDialog/LoadingDialog.jsx","components/SettingsDialog/SettingsDialog.jsx","functions/StringTable.jsx","components/OverviewPanel/OverviewPanel.jsx","components/AlertDialog/AlertDialog.jsx","components/HelpDialog/HelpDialog.jsx","components/LoadingState.jsx","functions/CoinBalance.jsx","functions/Settings.jsx","functions/costBasis.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["PopupButton","props","divStyle","disabled","display","cursor","buttonStyle","pointerEvents","OverlayTrigger","placement","trigger","overlay","Popover","Title","popup","style","Button","onClick","variant","text","PopupDiv","ActionType","Settings","BuyMore","SellSome","ToggleBalance","Deposit","Withdraw","BuyNew","BuyShares","SellShares","SaveSettings","Help","formatPrice","price","digits","formattedPrice","parseFloat","Number","toFixed","minutesAsSeconds","num","coinListFilename","readCoinTicker","setCoinTicker","coins","JSON","parse","localStorage","getItem","getPriceFromTicker","coinTicker","ticker","coin","find","item","undefined","isCoinTickerRefreshNeeded","lastRefresh","bitCoin","priceAge","Date","last_updated","lastRefreshSeconds","now","priceAgeSeconds","getTickers","setStatusBarText","a","diskBasedCoinTicker","bitcoin","timestamp","toLocaleString","axios","get","catch","error","getCoinTicker","calculateBalance","then","listResponse","tickers","list","key","keys","Set","filter","itemKey","has","add","uniqueByKeepFirst","data","symbol","tickerMap","map","id","name","quotes","last_refresh","createCoinTicker","values","setItem","stringify","reason","console","log","profitMessage","showBalance","profitAmount","profitPopupMessage","Math","abs","Td","styled","td","Coin","netBalance","shares","profit","costBasis","profitLossClass","arrowCharacter","balanceText","basisText","buyPopupText","sellPopupText","balancePopupMessage","className","event","preventDefault","handleAction","CoinList","coinBalance","value","coinBalances","ExchangeHeader","Component","BuyDialog","changeCoin","dialogTicker","divClass","modalTextFieldStatus","inputClass","feedbackClass","onValidator","quantity","Modal","show","onHide","handleClose","backdrop","keyboard","Header","modalTitle","Body","Table","availability","cashSharesAvailable","inputTitle","size","placeholder","decimalsLimit","allowNegativeValue","isNaN","defaultValue","initialValue","prefix","intlConfig","locale","currency","onValueChange","changedText","modalStatusMessage","Footer","button","actionTitle","BuyNewDialog","callValidator","selectCoin","currentCoin","matchesFilter","length","toLowerCase","includes","React","useState","setFilter","currencyInputEnabled","htmlFor","type","onChange","mapData","Boolean","onFilterList","target","control","unshift","filterCoins","buttonAction","SellDialog","LoadingDialog","loadingMessage","status","seconds","setSeconds","reloadSeconds","setReloadSeconds","enableReloadButton","useEffect","interval","setInterval","settings","feeRate","clearInterval","balancesStatus","tickersStatus","settingsStatus","handleReload","SettingsDialog","nobodyLooking","pryingEyes","OverviewPanel","totalDeposits","feesCollected","showHideBalanceText","showHideBalancePopup","showHideBalanceVariant","cashAvailable","withdrawEnabled","withdrawPopupText","netBalancePopupMessage","ButtonToolbar","ButtonGroup","Reset","AlertDialog","isAcceptanceButtonPresent","alertAcceptHandler","handler","alertButtonAcceptText","alertHeading","alertMessage","alertCancelHandler","HelpDialog","setKey","tabsList","showHideBalanceDescription","netBalanceDescription","Tabs","onSelect","k","activeKey","eventKey","title","LoadingState","coinBalanceFilename","saveCoinBalance","balances","balance","balanceJson","cash","feesPaid","activityLog","readCoinBalance","setters","jsonValues","parsedValues","noNan","settingsFilename","saveSettings","settingsJson","readSettings","calculateCostBasis","oldShares","oldCostBasis","addShares","currentPrice","oldValue","newValue","App","setTotalDeposits","setNetBalance","setCashAvailable","setFeeRate","feeTotal","setFeeTotal","setShowBalance","setCoinBalance","isHelpDialogOpen","setHelpDialogOpen","isLoadingDialogOpen","setLoadingDialogOpen","isBuyDialogOpen","setBuyDialogOpen","isSellDialogOpen","setSellDialogOpen","isBuyNewDialogOpen","setBuyNewDialogOpen","isSettingsDialogOpen","setSettingsDialogOpen","setDialogTicker","setInitialValue","setQuantity","statusBarText","setActivityLog","showAlert","setShowAlert","setAlertHeading","setAlertMessage","setAlertButtonAcceptText","setAlertAcceptHandler","setAlertCancelHandler","setLastRefresh","getFeeRate","useCallback","bal","totalAvailable","forEach","isCoinTickerRefreshNeededCallBack","componentDidMount","forcedReset","toggleBalance","handleDeposit","deposits","logEntry","handleWithdraw","handleBuyMore","valueChangeTicker","foundCoin","setActionTitle","setModalTitle","setInputTitle","setAvailability","setModalStatusMessage","buyMustBeGreaterThanZero","setModalTextFieldStatus","updateModalTitles","handleSellSome","sellMustBeGreaterThanZero","handleBuyNew","resetAllData","removeItem","resetCancelled","action","actionParameter","buyShares","sellShares","showHelp","Object","assign","Error","code","sellFees","newCoinBalance","newShares","newCoin","totalFeesPaid","statusText","buyFees","purchaseCoin","push","onModalBuyValidator","valueCoin","amount","sharesAvailableForSale","dollarAmount","replace","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d00b752d.chunk.js","sourcesContent":["import React from 'react'\r\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\r\nimport Popover from 'react-bootstrap/Popover'\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nexport default function PopupButton (props) {\r\n    const divStyle = props.disabled ? {display: 'inline-block', cursor: 'not-allowed'} : {};\r\n    const buttonStyle = props.disabled ? {pointerEvents : 'none'} : {};\r\n    return (\r\n        <OverlayTrigger\r\n            placement=\"top\"\r\n            trigger={[\"hover\", \"focus\"]}\r\n            overlay={(\r\n                <Popover>\r\n                    <Popover.Title>\r\n                        {props.popup}\r\n                    </Popover.Title>\r\n                </Popover>\r\n            )}>\r\n            <div style={divStyle}>\r\n                <Button \r\n                    onClick={props.onClick} \r\n                    style={buttonStyle} \r\n                    disabled={props.disabled} \r\n                    variant={props.variant}>\r\n                    {props.text}\r\n                </Button>\r\n            </div>\r\n        </OverlayTrigger>\r\n    );\r\n}\r\n","import React from 'react'\r\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\r\nimport Popover from 'react-bootstrap/Popover'\r\n\r\nexport default function PopupDiv (props) {\r\n    const divStyle = props.disabled ? {display: 'inline-block', cursor: 'not-allowed'} : {};\r\n    return (\r\n        <OverlayTrigger\r\n            placement=\"top\"\r\n            trigger={[\"hover\", \"focus\"]}\r\n            overlay={(\r\n                <Popover>\r\n                    <Popover.Title>\r\n                        {props.popup}\r\n                    </Popover.Title>\r\n                </Popover>\r\n            )}>\r\n            <div style={divStyle}>\r\n                {props.text}\r\n            </div>\r\n        </OverlayTrigger>\r\n    );\r\n}\r\n","const ActionType = {\r\n    Settings: \"Settings\", // settings dialog\r\n    BuyMore: \"BuyMore\", // but more of shares already owned\r\n    SellSome: \"SellSome\",   // sell existing shares\r\n    ToggleBalance: \"ToggleBalance\", // shows/hides the balances\r\n    Deposit: \"Deposit\",     // Deposit $1000\r\n    Withdraw: \"Withdraw\",   // Withdraw $1000\r\n    BuyNew: \"BuyNew\",   // list coins not owned to purchase dialog\r\n    BuyShares: \"BuyShares\",  // action resulting from clicking the Buy button\r\n    SellShares: \"SellShares\",  // action resulting from clicking the Sell button\r\n    SaveSettings: \"SaveSettings\",   // save settings from the SettingsDialog\r\n    Help: \"Help\",   // Show the help window\r\n}\r\n\r\nexport { ActionType };\r\n","export const formatPrice = (price, digits = 4) => {\r\n    if (price === 0)\r\n        return price;\r\n    var formattedPrice = parseFloat(Number(price).toFixed(digits));\r\n    for (; formattedPrice === 0; ++digits) {\r\n        if (digits === 15)\r\n            return price;\r\n        formattedPrice = parseFloat(Number(price).toFixed(digits));\r\n    }\r\n    return formattedPrice;\r\n}\r\n","export function secondsAsMilliseconds(sec) {\r\n    return sec * 1000;\r\n}\r\n\r\nexport function minutesAsMilliseconds(min) {\r\n    return min * secondsAsMilliseconds(60);\r\n}\r\n\r\nexport function hoursAsMilliseconds(hours) {\r\n    return hours * minutesAsMilliseconds(60);\r\n}\r\n\r\nexport function minutesAsSeconds(num) {\r\n    return num * 60;\r\n}\r\n","import { uniqueByKeepFirst } from './uniqueByKeepFirst';\r\nimport axios from 'axios';\r\nimport { minutesAsSeconds } from '../functions/timeframes';\r\n\r\nexport const createCoinTicker = (coin) => {\r\n    return {\r\n      key: coin.id,\r\n      name: coin.name,\r\n      ticker: coin.symbol,\r\n      price: coin.quotes['USD'].price,\r\n      last_updated: coin.last_updated,\r\n      last_refresh: coin.last_updated,\r\n    }\r\n}\r\n\r\n// how to read/write to localstorage: https://jsonworld.com/demo/how-to-use-localStorage-with-reactjs\r\nconst coinListFilename = 'PaperCoinList';\r\n\r\nexport const resetCoinTicker = () => {\r\n    localStorage.removeItem(coinListFilename);\r\n}\r\n\r\nexport const saveCoinTicker = (values) => {\r\n    localStorage.setItem(coinListFilename, JSON.stringify(values));\r\n}\r\n\r\nexport const readCoinTicker = (setCoinTicker) => {\r\n    const coins = JSON.parse(localStorage.getItem(coinListFilename));\r\n    // console.log(coins);\r\n    if (coins && setCoinTicker)\r\n        setCoinTicker(coins);\r\n    return coins;\r\n}\r\n\r\nexport const getPriceFromTicker = (coinTicker, ticker) => {\r\n    const coin = coinTicker ? coinTicker.find(item => item.ticker === ticker) : undefined;\r\n    return coin ? coin.price : \"\";\r\n}\r\n\r\nexport const isCoinTickerRefreshNeeded = (coinTicker, lastRefresh) => {\r\n    if (!coinTicker)\r\n      return false;\r\n    const bitCoin = coinTicker.find(coin => coin.ticker === \"BTC\");\r\n    const priceAge = Date.parse(bitCoin.last_updated);\r\n    // if lastRefresh is undefined, set to 2 minutes - it will use the actual age from the coinTickers for comparasion\r\n    const lastRefreshSeconds = lastRefresh ? (Date.now() - lastRefresh) / 1000 : minutesAsSeconds(2);\r\n    const priceAgeSeconds = (Date.now() - priceAge) / 1000;\r\n    if (lastRefreshSeconds > minutesAsSeconds(1) &&\r\n      priceAgeSeconds > minutesAsSeconds(5)) {\r\n      return true;\r\n    }\r\n    return false;\r\n}\r\n\r\nconst getTickers = async (setCoinTicker, setStatusBarText) => {\r\n    const diskBasedCoinTicker = readCoinTicker(null);\r\n    if (diskBasedCoinTicker && !isCoinTickerRefreshNeeded(diskBasedCoinTicker)) {\r\n        const bitcoin = diskBasedCoinTicker.find(coin => coin.ticker === 'BTC');\r\n        var timestamp = new Date(Date.parse(bitcoin.last_updated));\r\n        setStatusBarText(`Using cached prices, last updated at: ${timestamp.toLocaleString()}`);\r\n        return setCoinTicker(diskBasedCoinTicker);  // ok to use the last one loaded\r\n    }\r\n    return await axios.get('https://api.coinpaprika.com/v1/tickers').catch(function(error) {\r\n        const bitcoin = diskBasedCoinTicker.find(coin => coin.ticker === 'BTC');\r\n        var timestamp = new Date(Date.parse(bitcoin.last_updated));\r\n        setStatusBarText(`Failed to retrieve updated prices, cached prices will be used.  Last update was: ${timestamp.toLocaleString()}`);\r\n        return setCoinTicker(diskBasedCoinTicker);  // failed to connect, use the cached version\r\n    });\r\n}\r\n\r\nexport const getCoinTicker = (setCoinTicker, setStatusBarText, calculateBalance) => {\r\n    // console.log(`getCoinTicker getting token list`);\r\n    getTickers(setCoinTicker, setStatusBarText).then(listResponse => {\r\n        if (listResponse !== undefined) {\r\n            const tickers = uniqueByKeepFirst(listResponse.data, key => key.symbol);\r\n            if (tickers) {\r\n                const tickerMap = tickers.map(coin => {\r\n                    return createCoinTicker(coin);\r\n                })\r\n                setCoinTicker(tickerMap);\r\n                saveCoinTicker(tickerMap);\r\n                var timestamp = new Date(Date.now());\r\n                setStatusBarText(`Prices updated at: ${timestamp.toLocaleString()}`);\r\n                calculateBalance();\r\n            }\r\n        }\r\n    }, reason => {\r\n        setStatusBarText(`Failed to load prices: ${reason}`);\r\n        console.log(`getCoinTicker failed: ${reason}`);\r\n    });\r\n}\r\n","// copied from https://stackoverflow.com/questions/9229645/remove-duplicate-values-from-js-array\r\nexport function uniqueByKeepFirst(list, key) {\r\n    var keys = new Set();\r\n    if (list) {\r\n        return list.filter(item => {\r\n            const itemKey = key(item)\r\n            if (keys.has(itemKey)) {\r\n                return false; // key was already added\r\n            }\r\n            else {\r\n                keys.add(itemKey);  // add the key to the set\r\n                return item;\r\n            }\r\n        });\r\n    }\r\n    return list;\r\n}\r\n\r\n","import { formatPrice } from './formatPrice';\r\n\r\nexport function profitMessage(showBalance, profitAmount) {\r\n    var profitPopupMessage = formatPrice(Math.abs(profitAmount), 2);\r\n    if (profitAmount === 0)\r\n        return 'No gain, no loss';\r\n    if (showBalance)\r\n        return profitAmount >= 0 ? `Profitted by $${profitPopupMessage}` : `Loss of $${profitPopupMessage}`;\r\n    else\r\n        return profitAmount >= 0 ? `Profittable` : `Loss encountered`;\r\n}\r\n","import React from 'react';\r\nimport PopupButton from '../PopupButton';\r\nimport PopupDiv from '../PopupDiv';\r\nimport PropTypes from 'prop-types';\r\nimport { ActionType } from '../ActionType';\r\n// import styled, { css } from 'styled-components';\r\nimport styled from 'styled-components';\r\nimport { formatPrice } from '../../functions/formatPrice';\r\nimport './Coin.css';\r\nimport { getPriceFromTicker } from '../../functions/CoinTicker'\r\nimport { profitMessage } from '../../functions/ProfitMessage';\r\n\r\nconst Td = styled.td`\r\n    border: 2px solid #cccccc;\r\n    width: 25vh;\r\n`;\r\nexport default function Coin (props) {\r\n    const handleBuyMore = (event) => {\r\n        event.preventDefault();\r\n        props.handleAction(ActionType.BuyMore, props.id);\r\n    }\r\n    const handleSellSome = (event) => {\r\n        event.preventDefault();\r\n        props.handleAction(ActionType.SellSome, props.id);\r\n    }\r\n    const price = getPriceFromTicker(props.coinTicker, props.ticker);\r\n    const netBalance = props.shares * price;\r\n    const profit = netBalance - (props.shares * props.costBasis);\r\n    const profitLossClass = profit >= 0 ? \"price-profit\" : \"price-loss\"\r\n    const arrowCharacter = profit >= 0 ? \"▲\" : \"▼\";\r\n    const balanceText = props.showBalance ? '$' + formatPrice(netBalance) : arrowCharacter;\r\n    const basisText = props.showBalance ? '$' + formatPrice(props.costBasis) : '-';\r\n    const buyPopupText = `Buy more ${props.ticker}`;\r\n    const sellPopupText = `Sell your ${props.ticker}`;\r\n    const balancePopupMessage = profitMessage(props.showBalance, profit);\r\n    // console.log(`Coin: coinTicker: ${JSON.stringify(props)}`);\r\n\r\n    return (\r\n        <tr className=\"coin-row\">\r\n            <Td>{props.name}</Td>\r\n            <Td>{props.ticker}</Td>\r\n            <Td>{props.shares}</Td>\r\n            <Td>${formatPrice(price)}</Td>\r\n            <Td>{basisText}</Td>\r\n            <Td>\r\n                <div className={profitLossClass}>\r\n                <PopupDiv\r\n                    popup={balancePopupMessage}\r\n                    text={balanceText}\r\n                    disabled={false} />\r\n                </div>\r\n            </Td>\r\n            <Td>\r\n                <div className=\"td-action-buttons\">\r\n                    <PopupButton\r\n                        disabled={false} \r\n                        variant=\"success\"\r\n                        popup={buyPopupText}\r\n                        text=\"Buy\"\r\n                        onClick={handleBuyMore} />\r\n                    <PopupButton\r\n                        disabled={false} \r\n                        variant=\"danger\"\r\n                        popup={sellPopupText}\r\n                        text=\"Sell\"\r\n                        onClick={handleSellSome} />\r\n                </div>\r\n            </Td>\r\n        </tr>\r\n    );\r\n}\r\n\r\nCoin.propTypes = {\r\n    id: PropTypes.string.isRequired,\r\n    name: PropTypes.string.isRequired,\r\n    ticker: PropTypes.string.isRequired,\r\n    shares: PropTypes.number.isRequired,\r\n    costBasis: PropTypes.number.isRequired,\r\n}\r\n  \r\n  ","import React from 'react'\r\nimport Coin from '../Coin/Coin'\r\n\r\nexport default function CoinList (props) {\r\n    const coinBalances = () => {\r\n        if (props.coinBalance) {\r\n            // console.log(`CoinList: ${props.coinBalance} ${JSON.stringify(props.coinBalance)}`);\r\n            return props.coinBalance.map( value => \r\n                <Coin key={value.key} id={value.key}\r\n                    showBalance={props.showBalance}\r\n                    coinTicker={props.coinTicker}\r\n                    handleAction={props.handleAction} \r\n                    {...value} />\r\n            )\r\n        }\r\n    }\r\n    return (\r\n        <div>\r\n            <table className=\"table table-primary table-borders\">\r\n            <thead>\r\n                <tr>\r\n                <th>Name</th>\r\n                <th>Ticker</th>\r\n                <th>Shares</th>\r\n                <th>Price</th>\r\n                <th>Cost Basis</th>\r\n                <th>Balance</th>\r\n                <th>Actions</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {coinBalances()}\r\n            </tbody>\r\n            </table>\r\n        </div>\r\n    )\r\n}\r\n","import React, { Component } from 'react'\r\n// import logo from './money.gif'\r\nimport './ExchangeHeader.css';\r\n\r\nexport default class ExchangeHeader extends Component {\r\n    render() {\r\n        return (\r\n            <header className=\"App-header\">\r\n                {/* <img src={logo} alt=\"App logo\" className=\"App-logo\" /> */}\r\n                <h1 className=\"App-title\">\r\n                    Paper Coin Exchange\r\n                </h1>\r\n            </header>\r\n          )\r\n    }\r\n}\r\n","import React from 'react'\r\nimport { Modal, Button, Table } from 'react-bootstrap';\r\nimport CurrencyInput from 'react-currency-input-field';\r\nimport { ActionType } from '../ActionType';\r\nimport { getPriceFromTicker } from '../../functions/CoinTicker'\r\n\r\nexport default function BuyDialog(props) {\r\n    const changeCoin = props.coinBalance ? props.coinBalance.find(coin => coin.ticker === props.dialogTicker) : undefined;\r\n    const onBuy = (button) => {\r\n        props.handleAction(ActionType.BuyShares, { key: changeCoin.key, shares: props.quantity})\r\n        // console.log('buy: ', quantity);\r\n        props.handleClose();\r\n    }\r\n\r\n    const ticker = props.dialogTicker ?? \"\";\r\n    const price = getPriceFromTicker(props.coinTicker, ticker);\r\n    const divClass = (props.modalTextFieldStatus ? \"form-group has-success\" : \"form-group has-danger\");\r\n    const inputClass = (props.modalTextFieldStatus ? \"form-control is-valid\" : \"form-control is-invalid\");\r\n    const feedbackClass = (props.modalTextFieldStatus ? \"valid-feedback\" : \"invalid-feedback\");\r\n\r\n    const onAll = () => {\r\n        props.onValidator({quantity: props.cashSharesAvailable, coin: changeCoin});\r\n    }\r\n    \r\n    const handleCancel = () => {\r\n        props.handleClose();\r\n    }\r\n    \r\n    const callValidator = (quantity, coin) => {\r\n        props.onValidator({quantity: quantity, coin: coin});\r\n    }\r\n    const onValidator = (value) => {\r\n        callValidator(value, changeCoin);\r\n    }\r\n    return (\r\n        <Modal\r\n            show={props.show}\r\n            onHide={props.handleClose}\r\n            backdrop=\"static\"\r\n            keyboard={false}\r\n        >\r\n            <Modal.Header>\r\n                <Modal.Title>{props.modalTitle}</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n            <Table className=\"table table-primary table-borders\">\r\n                <tbody>\r\n                    <tr>\r\n                        <th>Coin</th>\r\n                        <td>{ticker}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <th>Price</th>\r\n                        <td>{price}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <th>{props.availability}</th>\r\n                        <td>{props.cashSharesAvailable}</td>\r\n                    </tr>\r\n                </tbody>\r\n            </Table>\r\n            <div className=\"flex-filter\">\r\n                {props.inputTitle}\r\n                <div>\r\n                    <Button variant=\"danger\" size=\"sm\"\r\n                        onClick={onAll}>\r\n                        All\r\n                    </Button>\r\n                </div>\r\n            </div>\r\n            <div className={divClass}>\r\n                <CurrencyInput\r\n                    className={inputClass} \r\n                    id=\"text-input\" \r\n                    name=\"input-name\"\r\n                    placeholder=\"Please enter a dollar amount\"\r\n                    decimalsLimit={18}\r\n                    allowNegativeValue=\"false\"\r\n                    value={isNaN(props.quantity) ? 0 : props.quantity}\r\n                    defaultValue={props.initialValue}\r\n                    prefix={props.prefix}\r\n                    intlConfig={{ locale: 'en-US', currency: 'USD' }}\r\n                    onValueChange={(changedText) => onValidator(changedText)}\r\n                />\r\n                <div className={feedbackClass}>{props.modalStatusMessage}</div>\r\n            </div>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <Button variant=\"secondary\" \r\n                    onClick={handleCancel}>\r\n                    Cancel\r\n                </Button>\r\n                <Button disabled={!props.modalTextFieldStatus} \r\n                    onClick={onBuy} \r\n                    variant=\"primary\">\r\n                    {props.actionTitle}\r\n                </Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    );\r\n}\r\n","import React from 'react'\r\nimport { Modal, Button, Table } from 'react-bootstrap';\r\nimport CurrencyInput from 'react-currency-input-field';\r\nimport { ActionType } from '../ActionType';\r\nimport './BuyNewDialog.css';\r\nimport { formatPrice } from '../../functions/formatPrice'\r\nimport { getPriceFromTicker } from '../../functions/CoinTicker'\r\n\r\nexport default function BuyNewDialog(props) {\r\n    const changeCoin = props.coinTicker ? props.coinTicker.find(coin => coin.ticker === props.dialogTicker) : undefined;\r\n    const onBuy = (buttonAction) => {\r\n        props.handleAction(ActionType.BuyShares, { key: changeCoin.key, shares: props.quantity})\r\n        props.handleClose();\r\n    }\r\n    const onFilterList = (text) => {\r\n        setFilter(text);\r\n        var mapData = props.coinTicker.map (coin => {\r\n            if (matchesFilter(coin, text)) {\r\n                return coin;\r\n            }\r\n            return null;\r\n        });\r\n        mapData = mapData.filter(Boolean);\r\n        // if the filter erases the selection, pick one of the remaining coins\r\n        const foundList = mapData.find((coin) => coin && props.dialogTicker === coin.ticker);\r\n        if (!foundList && mapData.length > 0) {\r\n            selectCoin(mapData[0].ticker);\r\n        }\r\n    }\r\n\r\n    const onAll = () => {\r\n        props.onValidator({quantity: props.cashSharesAvailable, coin: changeCoin});\r\n    }\r\n    \r\n    const handleCancel = () => {\r\n        props.handleClose();\r\n    }\r\n    const callValidator = (quantity, coin) => {\r\n        props.onValidator({quantity: quantity, coin: coin});\r\n    }\r\n    const onValidator = (value) => {\r\n        callValidator(value, changeCoin);\r\n    }\r\n    const onSelectCoin = (control) => {\r\n        selectCoin(control.target.value);\r\n    }\r\n    const selectCoin = (ticker) => {\r\n        const currentCoin = props.selectCoin(ticker);\r\n        callValidator(props.quantity, currentCoin);\r\n    }\r\n    const matchesFilter = (coin, filter) => {\r\n        return filter.length === 0 ||\r\n            coin.key.toLowerCase().includes(filter.toLowerCase()) ||\r\n            coin.name.toLowerCase().includes(filter.toLowerCase()) ||\r\n            coin.ticker.toLowerCase().includes(filter.toLowerCase());\r\n    }\r\n    const filterCoins = (text) => {\r\n        if (props.coinTicker !== undefined && props.show === true) {\r\n            const mapData = props.coinTicker.map (coin => {\r\n                if (matchesFilter(coin, text)) {\r\n                    // console.log(`<option key=${coin.ticker} value=${coin.ticker} >${coin.ticker}</option>`)\r\n                    return <option key={coin.ticker} value={coin.ticker}  >{coin.ticker}</option>\r\n                }\r\n                return null;\r\n            });\r\n            // console.log(`<option key=\"null\" value=\"\" />`);\r\n            mapData.unshift(<option key=\"null\" value=\"\" />);\r\n            return mapData;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    const price = changeCoin ? formatPrice(getPriceFromTicker(props.coinTicker, changeCoin.ticker)) : \"\";\r\n    const divClass = (props.modalTextFieldStatus ? \"form-group has-success\" : \"form-group has-danger\");\r\n    const inputClass = (props.modalTextFieldStatus ? \"form-control is-valid\" : \"form-control is-invalid\");\r\n    const feedbackClass = (props.modalTextFieldStatus ? \"valid-feedback\" : \"invalid-feedback\");\r\n    const [filter, setFilter] = React.useState(\"\");\r\n    const currencyInputEnabled = changeCoin ? true : false;\r\n    return (\r\n        <Modal\r\n            show={props.show}\r\n            onHide={props.handleClose}\r\n            backdrop=\"static\"\r\n            keyboard={false}\r\n        >\r\n            <Modal.Header>\r\n                <Modal.Title>{props.modalTitle}</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <div className=\"flex-filter\" id=\"filter-div\">\r\n                    <label htmlFor=\"filter-select\" className=\"form-label mt-4\">Select ticker</label>\r\n                    <div>\r\n                        <input type=\"text\"\r\n                            className=\"form-control\"\r\n                            id=\"filter-coins\" \r\n                            name=\"filter-coins\"\r\n                            placeholder=\"Filter list by ticker name\"\r\n                            onChange={(event) => onFilterList(event.target.value)}\r\n                        />\r\n                    </div>\r\n                </div>\r\n                <select className=\"form-select\" \r\n                    id=\"filter-select\" \r\n                    onChange={onSelectCoin}\r\n                    value={props.dialogTicker}\r\n                    placeholder=\"Select ticker name...\">\r\n                    {filterCoins(filter)}\r\n                </select>\r\n                <br/>\r\n                <Table className=\"table table-primary table-borders\">\r\n                    <tbody>\r\n                        <tr>\r\n                            <th>Coin</th>\r\n                            <td>{props.dialogTicker}</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <th>Price</th>\r\n                            <td>{price}</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <th>{props.availability}</th>\r\n                            <td>{props.cashSharesAvailable}</td>\r\n                        </tr>\r\n                    </tbody>\r\n                </Table>\r\n                <div className=\"flex-filter\">\r\n                {props.inputTitle}\r\n                <div>\r\n                    <Button variant=\"danger\" size=\"sm\"\r\n                        onClick={onAll}>\r\n                        All\r\n                    </Button>\r\n                </div>\r\n            </div>\r\n                <div className={divClass}>\r\n                    <CurrencyInput\r\n                        className={inputClass} \r\n                        id=\"text-input\" \r\n                        name=\"input-name\"\r\n                        placeholder=\"Please enter a dollar amount\"\r\n                        decimalsLimit={18}\r\n                        allowNegativeValue=\"false\"\r\n                        value={props.quantity}\r\n                        defaultValue={props.initialValue}\r\n                        disabled={!currencyInputEnabled}\r\n                        prefix={props.prefix}\r\n                        intlConfig={{ locale: 'en-US', currency: 'USD' }}\r\n                        onValueChange={(changedText) => onValidator(changedText)}\r\n                    />\r\n                    <div className={feedbackClass}>{props.modalStatusMessage}</div>\r\n                </div>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <Button variant=\"secondary\" \r\n                    onClick={handleCancel}>\r\n                    Cancel\r\n                </Button>\r\n                <Button disabled={!props.modalTextFieldStatus} \r\n                    onClick={onBuy} \r\n                    variant=\"primary\">\r\n                    {props.actionTitle}\r\n                </Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    );\r\n}\r\n\r\n","import React from 'react'\r\nimport { Modal, Button, Table } from 'react-bootstrap';\r\nimport { ActionType } from '../ActionType';\r\nimport { getPriceFromTicker } from '../../functions/CoinTicker'\r\n\r\nexport default function SellDialog(props) {\r\n    const changeCoin = props.coinBalance ? props.coinBalance.find(coin => coin.ticker === props.dialogTicker) : undefined;\r\n    const onSell = (event) => {\r\n        props.handleAction(ActionType.SellShares, { key: changeCoin.key, shares: props.quantity});\r\n        props.handleClose();\r\n    }\r\n\r\n    const ticker = changeCoin ? changeCoin.ticker : \"\";\r\n    const price = getPriceFromTicker(props.coinTicker, ticker);\r\n    const divClass = (props.modalTextFieldStatus ? \"form-group has-success\" : \"form-group has-danger\");\r\n    const inputClass = (props.modalTextFieldStatus ? \"form-control is-valid\" : \"form-control is-invalid\");\r\n    const feedbackClass = (props.modalTextFieldStatus ? \"valid-feedback\" : \"invalid-feedback\");\r\n\r\n    const handleCancel = () => {\r\n        props.handleClose();\r\n    }\r\n    \r\n    const onAll = () => {\r\n        props.onValidator(props.cashSharesAvailable);\r\n    }\r\n    \r\n    return (\r\n        <Modal\r\n            show={props.show}\r\n            onHide={props.handleClose}\r\n            backdrop=\"static\"\r\n            keyboard={false}\r\n        >\r\n            <Modal.Header>\r\n                <Modal.Title>{props.modalTitle}</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n            <Table className=\"table table-primary table-borders\">\r\n                <tbody>\r\n                    <tr>\r\n                        <th>Coin</th>\r\n                        <td>{props.dialogTicker}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <th>Price</th>\r\n                        <td>{price}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <th>{props.availability}</th>\r\n                        <td>{props.cashSharesAvailable}</td>\r\n                    </tr>\r\n                </tbody>\r\n            </Table>\r\n            <div className=\"flex-filter\">\r\n                {props.inputTitle}\r\n                <div>\r\n                    <Button variant=\"danger\" size=\"sm\"\r\n                        onClick={onAll}>\r\n                        All\r\n                    </Button>\r\n                </div>\r\n            </div>\r\n            <div className={divClass}>\r\n                <input type=\"text\"\r\n                    className={inputClass} \r\n                    id=\"text-input\" \r\n                    value={props.quantity}\r\n                    name=\"input-name\"\r\n                    placeholder=\"Please enter number of shares to sell\"\r\n                    onChange={(event) => props.onValidator(event.target.value)}\r\n                />\r\n                <div className={feedbackClass}>{props.modalStatusMessage}</div>\r\n            </div>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <Button variant=\"secondary\" \r\n                    onClick={handleCancel}>\r\n                    Cancel\r\n                </Button>\r\n                <Button disabled={!props.modalTextFieldStatus} \r\n                    onClick={onSell} \r\n                    variant=\"primary\">\r\n                    {props.actionTitle}\r\n                </Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    );\r\n}\r\n","import React from 'react'\r\nimport { Modal, Button, Table } from 'react-bootstrap';\r\n\r\nexport default function LoadingDialog(props) {\r\n    const loadingMessage = (status) => {\r\n        return status ? \"Completed\" : \"Loading...\";\r\n    }\r\n    const balancesStatus = () => {\r\n        const status = Boolean(props.coinBalance);\r\n        return <div>\r\n            {loadingMessage(status)}\r\n        </div>\r\n    }\r\n    const settingsStatus = () => {\r\n        const status = props.settings.feeRate !== undefined;\r\n        return <div>\r\n            {loadingMessage(status)}\r\n        </div>\r\n    }\r\n    const tickersStatus = () => {\r\n        const status = Boolean(props.coinTicker);\r\n        return <div>\r\n            {loadingMessage(status)}\r\n        </div>\r\n    }\r\n    const [seconds, setSeconds] = React.useState(0);\r\n    const [reloadSeconds, setReloadSeconds] = React.useState(5);\r\n    const handleReload = () => {\r\n        props.handleReload();\r\n        setReloadSeconds(seconds + 5);\r\n    }\r\n    const enableReloadButton = seconds >= reloadSeconds;\r\n    React.useEffect(() => {\r\n        if (props.show) {\r\n            const interval = setInterval(() => {\r\n            setSeconds(seconds => seconds + 1);\r\n            if (Boolean(props.coinBalance) &&\r\n                Boolean(props.coinTicker) &&\r\n                props.settings.feeRate !== undefined) {\r\n                props.handleClose();\r\n                setSeconds(0);\r\n            }}, 1000);\r\n            return () => clearInterval(interval);\r\n        }\r\n    }, [props]);\r\n    return (\r\n        <Modal\r\n            show={props.show}\r\n            onHide={props.handleClose}\r\n        >\r\n            <Modal.Header>\r\n                <Modal.Title>{props.modalTitle}</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <Table className=\"table table-primary table-borders\">\r\n                    <tbody>\r\n                        <tr>\r\n                            <th>Balances</th>\r\n                            <td>\r\n                                <div>\r\n                                    {balancesStatus()}\r\n                                </div>\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <th>Tickers</th>\r\n                            <td>\r\n                                <div>\r\n                                    {tickersStatus()}\r\n                                </div>\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <th>Settings</th>\r\n                            <td>\r\n                                <div>\r\n                                    {settingsStatus()}\r\n                                </div>\r\n                            </td>\r\n                        </tr>\r\n                    </tbody>\r\n                </Table>\r\n                <p>{seconds} seconds have elapsed.</p>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <Button variant=\"primary\" \r\n                    disabled={!enableReloadButton}\r\n                    onClick={handleReload}>\r\n                    Attempt to reload\r\n                </Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    );\r\n}\r\n","import React from 'react'\r\nimport { Modal, Button, Table } from 'react-bootstrap';\r\nimport { ActionType } from '../ActionType';\r\n\r\nexport default function SettingsDialog(props) {\r\n\r\n    const handleCancel = () => {\r\n        props.handleClose();\r\n    }\r\n    \r\n    const onSave = () => {\r\n        props.handleClose();\r\n        props.handleAction(ActionType.SaveSettings, { feeRate: props.settings.feeRate });\r\n    }\r\n    \r\n    return (\r\n        <Modal\r\n            show={props.show}\r\n            onHide={props.handleClose}\r\n            backdrop=\"static\"\r\n            keyboard={false}\r\n        >\r\n            <Modal.Header>\r\n                <Modal.Title>{props.modalTitle}</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n            <Table className=\"table table-primary table-borders\">\r\n                <tbody>\r\n                    <tr>\r\n                        <th>Fees %</th>\r\n                        <td>\r\n                            <input type=\"text\"\r\n                                className=\"form-control\" \r\n                                id=\"text-input\" \r\n                                value={props.settings.feeRate}\r\n                                name=\"input-name\"\r\n                                placeholder=\"Enter percentage that should be collected in fees\"\r\n                                onChange={(event) => props.onValidator({feeRate: event.target.value})}/>\r\n                        </td>\r\n                    </tr>\r\n                </tbody>\r\n            </Table>\r\n            <div className=\"flex-filter\">\r\n                {props.inputTitle}\r\n            </div>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <Button variant=\"info\" size=\"sm\"\r\n                    onClick={onSave}>\r\n                    Save\r\n                </Button>\r\n                <Button variant=\"info\" size=\"sm\"\r\n                    onClick={handleCancel}>\r\n                    Cancel\r\n                </Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    );\r\n}\r\n","export const nobodyLooking = 'Nobody is looking over your shoulder, show your balances';\r\nexport const pryingEyes = 'Hide balances from prying eyes';","import React from 'react'\r\nimport styled from 'styled-components';\r\nimport ButtonToolbar from 'react-bootstrap/ButtonToolbar';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport { ActionType } from '../ActionType';\r\nimport PopupButton from '../PopupButton';\r\nimport PopupDiv from '../PopupDiv';\r\nimport { formatPrice } from '../../functions/formatPrice';\r\nimport { profitMessage } from '../../functions/ProfitMessage';\r\nimport { nobodyLooking, pryingEyes } from '../../functions/StringTable';\r\n\r\nconst Td = styled.td`\r\n    border: 2px solid #cccccc;\r\n    width: 25vh;\r\n`;\r\n\r\nexport default function OverviewPanel(props) {\r\n    const handleShowHideBalance = (event) => {\r\n        event.preventDefault();\r\n        props.handleAction(ActionType.ToggleBalance, !props.showBalance);\r\n    }\r\n\r\n    const handleSettings = (event) => {\r\n        event.preventDefault();\r\n        props.handleAction(ActionType.Settings);\r\n    }\r\n\r\n    const handleClickBuyNew = (event) => {\r\n        event.preventDefault();\r\n        // popup a modal to let the user decide what coin & how much\r\n        props.handleAction(ActionType.BuyNew);\r\n    }\r\n\r\n    const handleClickDeposit = (event) => {\r\n        event.preventDefault();\r\n        // popup a modal to let the user decide how much\r\n        props.handleAction(ActionType.Deposit, 1000);\r\n    }\r\n\r\n    const handleClickWithdraw = (event) => {\r\n        event.preventDefault();\r\n        // popup a modal to let the user decide how much\r\n        props.handleAction(ActionType.Withdraw, 1000);\r\n    }\r\n\r\n    const handleClickHelp = (event) => {\r\n        event.preventDefault();\r\n        // popup a modal to let the user decide how much\r\n        props.handleAction(ActionType.Help);\r\n    }\r\n\r\n    const handleReset = (event) => {\r\n        event.preventDefault();\r\n        props.handleAction(ActionType.Reset);\r\n    }\r\n\r\n    const profit = props.netBalance - props.totalDeposits;\r\n    const profitLossClass = profit >= 0 ? \"price-profit\" : \"price-loss\"\r\n    const arrowCharacter = profit >= 0 ? \"▲\" : \"▼\";\r\n\r\n    const netBalance = `${props.showBalance ? \"$\" + formatPrice(props.netBalance, 2) : arrowCharacter}`;\r\n    const totalDeposits = `${props.showBalance ? \"$\" + formatPrice(props.totalDeposits, 2) : \"-\"}`;\r\n    const feeRate = `${props.feeRate}%`;\r\n    const feesCollected = `${props.showBalance ? \"$\" + formatPrice(props.feesCollected, 2) : \"-\"}`;\r\n    \r\n    const showHideBalanceText = props.showBalance ? 'Hide Balance' : 'Show Balance';\r\n    const showHideBalancePopup = props.showBalance ? pryingEyes : nobodyLooking;\r\n    const showHideBalanceVariant = (props.showBalance ? 'warning' : 'info');\r\n    const cashAvailable = `${props.showBalance ? \"$\" + formatPrice(props.cashAvailable, 2) : \"-\"}`;\r\n    const withdrawEnabled = props.cashAvailable >= 1000;\r\n    const withdrawPopupText = withdrawEnabled ? \"Withdraw $1000\" : \"Insufficient funds available to withdraw $1000\";\r\n    const netBalancePopupMessage = profitMessage(props.showBalance, profit);\r\n\r\n    return (\r\n        <div>\r\n            <table  className=\"table table-primary table-borders\">\r\n                <thead>\r\n                    <tr>\r\n                        <th>Total Deposits</th>\r\n                        <th>Net Balance</th>\r\n                        <th>Cash Available</th>\r\n                        <th>Fee Rate</th>\r\n                        <th>Fees collected</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    <tr>\r\n                        <Td>{totalDeposits}</Td>\r\n                        <Td>\r\n                            <div className={profitLossClass}>\r\n                                <PopupDiv\r\n                                    popup={netBalancePopupMessage}\r\n                                    text={netBalance}\r\n                                    disabled={false} />\r\n                            </div>\r\n                        </Td>\r\n                        <Td>{cashAvailable}</Td>\r\n                        <Td>{feeRate}</Td>\r\n                        <Td>{feesCollected}</Td>\r\n                    </tr>\r\n                </tbody>\r\n            </table>\r\n            <div className=\"button-toolbar-actions\" >\r\n                <ButtonToolbar aria-label=\"Toolbar with button groups\">\r\n                <ButtonGroup className=\"me-2\" aria-label=\"Show-Hide group\">\r\n                    <PopupButton\r\n                        disabled={false} \r\n                        variant={showHideBalanceVariant}\r\n                        popup={showHideBalancePopup}\r\n                        text={showHideBalanceText}\r\n                        onClick={handleShowHideBalance} />\r\n                </ButtonGroup>\r\n                <ButtonGroup className=\"me-2\" aria-label=\"Reset group\">\r\n                    <PopupButton\r\n                        disabled={false} \r\n                        variant=\"danger\"\r\n                        popup=\"Reset all deposits and purchases\"\r\n                        text=\"Reset\"\r\n                        onClick={handleReset} />\r\n                </ButtonGroup>\r\n                <ButtonGroup className=\"me-2\" aria-label=\"Preferences group\">\r\n                    <PopupButton\r\n                        disabled={false} \r\n                        variant=\"secondary\"\r\n                        popup=\"Adjust application preferences\"\r\n                        text=\"Settings\"\r\n                        onClick={handleSettings} />\r\n                </ButtonGroup>\r\n                <ButtonGroup className=\"me-2\" aria-label=\"Deposit-Withdraw group\">\r\n                    <PopupButton\r\n                        disabled={false} \r\n                        variant=\"success\"\r\n                        popup=\"Deposit $1000\"\r\n                        text=\"Deposit\"\r\n                        onClick={handleClickDeposit} />\r\n                    <PopupButton\r\n                        disabled={!withdrawEnabled} \r\n                        variant=\"danger\"\r\n                        popup={withdrawPopupText}\r\n                        text=\"Withdraw\"\r\n                        onClick={handleClickWithdraw} />\r\n                </ButtonGroup>\r\n                <ButtonGroup className=\"me-2\" aria-label=\"Buy group\">\r\n                    <PopupButton\r\n                        disabled={false} \r\n                        variant=\"success\"\r\n                        popup=\"Purchase coins\"\r\n                        text=\"Buy\"\r\n                        onClick={handleClickBuyNew} />\r\n                </ButtonGroup>\r\n                <ButtonGroup className=\"me-2\" aria-label=\"Help group\">\r\n                    <PopupButton\r\n                        disabled={false} \r\n                        variant=\"info\"\r\n                        popup=\"Get help for using this application\"\r\n                        text=\"Help\"\r\n                        onClick={handleClickHelp} />\r\n                </ButtonGroup>\r\n                </ButtonToolbar>\r\n            </div>\r\n        </div>\r\n    );\r\n}","import React from 'react'\r\nimport { Modal, Button } from 'react-bootstrap';\r\n\r\nexport default function AlertDialog(props) {\r\n    const isAcceptanceButtonPresent = () => {\r\n        return props.alertAcceptHandler !== undefined &&\r\n            props.alertAcceptHandler.handler !== undefined &&\r\n            props.alertButtonAcceptText && props.alertButtonAcceptText.length > 0;\r\n    }\r\n    const getCancelButtonText = () => {\r\n        return isAcceptanceButtonPresent() ? \"Cancel\" : \"Close\";\r\n    }\r\n    const getAlertAcceptButton = () => {\r\n        if (isAcceptanceButtonPresent()) {\r\n          return <Button onClick={() => {\r\n              props.handleClose();\r\n              props.alertAcceptHandler.handler();\r\n            }} variant=\"outline-danger\">\r\n            {props.alertButtonAcceptText}\r\n            </Button>\r\n        }\r\n        return <></>;\r\n      }\r\n    \r\n      return (\r\n        <Modal\r\n            show={props.show}\r\n            onHide={props.handleClose}\r\n            backdrop=\"static\"\r\n            keyboard={false}\r\n        >\r\n            <Modal.Header>\r\n                <Modal.Title>{props.alertHeading}</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                {props.alertMessage}\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                {getAlertAcceptButton()}\r\n                <Button onClick={() => {\r\n                    props.handleClose();\r\n                    props.alertCancelHandler.handler();\r\n                    }} variant=\"outline-success\">\r\n                    {getCancelButtonText()}\r\n                </Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    );\r\n}","import React from 'react'\r\nimport { Modal, Button } from 'react-bootstrap';\r\nimport { ActionType } from '../ActionType';\r\nimport PopupButton from '../PopupButton';\r\nimport PopupDiv from '../PopupDiv';\r\nimport { formatPrice } from '../../functions/formatPrice';\r\nimport Tab from 'react-bootstrap/Tabs';\r\nimport Tabs from 'react-bootstrap/Tabs';\r\nimport { profitMessage } from '../../functions/ProfitMessage';\r\nimport { nobodyLooking, pryingEyes } from '../../functions/StringTable';\r\n\r\nexport default function HelpDialog(props) {\r\n    const [key, setKey] = React.useState(0);\r\n    const tabsList = [\"deposit\", \"showBalance\", \"prices\", \"buy\", \"fees\"];\r\n\r\n    const handleShowHideBalance = (event) => {\r\n        event.preventDefault();\r\n        props.handleAction(ActionType.ToggleBalance, !props.showBalance);\r\n    }\r\n\r\n    const handleClickDeposit = (event) => {\r\n        event.preventDefault();\r\n        // popup a modal to let the user decide how much\r\n        props.handleAction(ActionType.Deposit, 1000);\r\n    }\r\n\r\n    const handlePrevious = (event) => {\r\n        event.preventDefault();\r\n        setKey((key + tabsList.length - 1) % tabsList.length);\r\n    }\r\n\r\n    const handleNext = (event) => {\r\n        event.preventDefault();\r\n        setKey((key + 1) % tabsList.length);\r\n    }\r\n\r\n    const handleClickBuy = (event) => {\r\n        event.preventDefault();\r\n        props.handleAction(ActionType.BuyNew);\r\n        props.handleClose();\r\n    }\r\n\r\n    const handleSettings = (event) => {\r\n        event.preventDefault();\r\n        props.handleAction(ActionType.Settings);\r\n        props.handleClose();\r\n    }\r\n\r\n    const profit = props.netBalance - props.totalDeposits;\r\n    const profitLossClass = profit >= 0 ? \"price-profit\" : \"price-loss\"\r\n    const arrowCharacter = profit >= 0 ? \"▲\" : \"▼\";\r\n    const netBalancePopupMessage = profitMessage(props.showBalance, profit);\r\n    const netBalance = `${props.showBalance ? \"$\" + formatPrice(props.netBalance, 2) : arrowCharacter}`;\r\n    const showHideBalanceDescription = props.showBalance ? 'hide' : 'show';\r\n    const showHideBalanceText = props.showBalance ? 'Hide Balance' : 'Show Balance';\r\n    const showHideBalancePopup = props.showBalance ? pryingEyes : nobodyLooking;\r\n    const showHideBalanceVariant = (props.showBalance ? 'warning' : 'info');\r\n    const netBalanceDescription = (props.showBalance ? 'Net Balance is displayed for anyone to see' : 'Net Balance displays as an arrow to hide the amount');\r\n    return (\r\n        <Modal\r\n            show={props.show}\r\n            onHide={props.handleClose}\r\n        >\r\n            <Modal.Header>\r\n                <Modal.Title>Help using Paper Coin Exchange</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <Tabs onSelect={(k) => setKey(k)} activeKey={tabsList[key]} id=\"help-tabs\" className=\"mb-3\">\r\n                    <Tab eventKey=\"deposit\" title=\"Deposit\">\r\n                        <div className=\"wrap-content\" >\r\n                            <div>Click the deposit button to deposit $1000 into your account</div>\r\n                            <div className=\"right-left-margin\">\r\n                                <PopupButton\r\n                                    disabled={false} \r\n                                    variant=\"success\"\r\n                                    popup=\"Deposit $1000\"\r\n                                    text=\"Deposit\"\r\n                                    onClick={handleClickDeposit} />\r\n                            </div>\r\n                            Deposits: {formatPrice(props.totalDeposits, 2)}\r\n                        </div>\r\n                    </Tab>\r\n                    <Tab eventKey=\"showBalance\" title=\"Balance\">\r\n                        <div className=\"wrap-content\" >\r\n                            <div>Click the {showHideBalanceText} button to {showHideBalanceDescription} your balances</div>\r\n                            <div className=\"right-left-margin\">\r\n                                <PopupButton\r\n                                    disabled={false} \r\n                                    variant={showHideBalanceVariant}\r\n                                    popup={showHideBalancePopup}\r\n                                    text={showHideBalanceText}\r\n                                    onClick={handleShowHideBalance} />\r\n                            </div>\r\n                            <div className=\"right-margin\">{netBalanceDescription}</div>\r\n                            <div className={profitLossClass}>\r\n                                <PopupDiv\r\n                                    popup={netBalancePopupMessage}\r\n                                    text={netBalance}\r\n                                    disabled={false} />\r\n                            </div>\r\n                        </div>\r\n                    </Tab>\r\n                    <Tab eventKey=\"prices\" title=\"Price\">\r\n                        <div className=\"wrap-content\" >\r\n                            <div>Price are automatically updated every 5 minutes while an internet connection is available.  When an internet connection is not available, a cached version of the prices will be used</div>\r\n                        </div>\r\n                    </Tab>\r\n                    <Tab eventKey=\"buy\" title=\"Buy\">\r\n                        <div className=\"wrap-content\" >\r\n                            <div>Click the Buy button to display a list of coins available to purchase and enter how much to buy.  When you click the Buy button, the help window will close</div>\r\n                            <div className=\"right-left-margin\">\r\n                                <PopupButton\r\n                                    disabled={false} \r\n                                    variant=\"success\"\r\n                                    popup=\"Purchase coins\"\r\n                                    text=\"Buy\"\r\n                                    onClick={handleClickBuy} />\r\n                            </div>\r\n                        </div>\r\n                    </Tab>\r\n                    <Tab eventKey=\"fees\" title=\"Fees\">\r\n                        <div className=\"wrap-content\" >\r\n                            <div>You can change the settings to simulate fees on your purchases/sales.  Click the Settings button to change the fees rate.  When you click the Setting button, the help window will close</div>\r\n                            <div className=\"right-left-margin\">\r\n                                <PopupButton\r\n                                    disabled={false} \r\n                                    variant=\"secondary\"\r\n                                    popup=\"Adjust application preferences\"\r\n                                    text=\"Settings\"\r\n                                    onClick={handleSettings} />\r\n                            </div>\r\n                        </div>\r\n                    </Tab>\r\n                </Tabs>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <Button variant=\"secondary\" \r\n                    disabled={false}\r\n                    onClick={handlePrevious}>\r\n                    Previous\r\n                </Button>\r\n                <Button variant=\"secondary\" \r\n                    disabled={false}\r\n                    onClick={handleNext}>\r\n                    Next\r\n                </Button>\r\n                <Button variant=\"primary\" \r\n                    disabled={false}\r\n                    onClick={props.handleClose}>\r\n                    Close\r\n                </Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    );\r\n}\r\n","const LoadingState = {\r\n    Initial: \"Initial\",\r\n    Displayed: \"Displayed\",\r\n    Completed: \"Completed\",\r\n}\r\n\r\nexport { LoadingState };\r\n","export const createCoinBalance = (coin) => {\r\n    return {\r\n        key: coin.key,\r\n        name: coin.name,\r\n        ticker: coin.ticker,\r\n        shares: 0,\r\n        costBasis: 0,\r\n    }\r\n}\r\n\r\nconst coinBalanceFilename = 'PaperCoinBalance';\r\n\r\nexport const resetCoinBalance = () => {\r\n  localStorage.removeItem(coinBalanceFilename);\r\n}\r\n\r\nexport const saveCoinBalance = (values) => {\r\n  const balances = values.balance.filter(coin => coin && !isNaN(coin.shares) && coin.shares > 0);\r\n  const balanceJson = JSON.stringify({ balance: balances, totalDeposits: values.totalDeposits, cash: values.cash, feesPaid: values.feesPaid, activityLog: values.activityLog });\r\n  localStorage.setItem(coinBalanceFilename, balanceJson);\r\n  // console.log(`balances: ${balanceJson}`);\r\n}\r\n\r\nexport const readCoinBalance = (setters) => {\r\n  setters.balance(null);\r\n  const jsonValues = localStorage.getItem(coinBalanceFilename);\r\n  const parsedValues = JSON.parse(jsonValues);\r\n  // console.log(`readCoinBalance: jsonValues: ${jsonValues}`)\r\n\r\n  var balances = [];\r\n  var cash = 0;\r\n  var feesPaid = 0;\r\n  var totalDeposits = 0;\r\n  var log = [];\r\n\r\n  if (parsedValues !== null) {\r\n    balances = parsedValues.balance ?? [];\r\n    cash = parsedValues.cash ?? 0;\r\n    feesPaid = parsedValues.feesPaid ?? 0;\r\n    totalDeposits = parsedValues.totalDeposits ?? 0;\r\n    log = parsedValues.activityLog ?? [];\r\n  }\r\n  balances = balances.map(coin => {\r\n    // add newly added members\r\n    if (isNaN(coin.costBasis))\r\n      coin.costBasis = 0;\r\n    return coin;\r\n  });\r\n\r\n  // trim records that have NaN as the number of shares\r\n  const noNan = balances.filter(coin => coin && !isNaN(coin.shares));\r\n  setters.balance(noNan);\r\n  setters.cash(cash);\r\n  setters.feesPaid(feesPaid);\r\n  setters.totalDeposits(totalDeposits);\r\n  setters.activityLog(log);\r\n}\r\n\r\n","const settingsFilename = 'PaperSettings';\r\n\r\nexport const resetSettings = () => {\r\n  localStorage.removeItem(settingsFilename);\r\n}\r\n\r\nexport const saveSettings = (values) => {\r\n  const settingsJson = JSON.stringify({ feeRate: values.feeRate });\r\n  localStorage.setItem(settingsFilename, settingsJson);\r\n  console.log(`settings: ${settingsJson}`);\r\n}\r\n\r\n// { feeRate: feeRate }\r\nexport const readSettings = (setters) => {\r\n  const jsonValues = localStorage.getItem(settingsFilename);\r\n  const parsedValues = JSON.parse(jsonValues);\r\n  // console.log(`readSettings: jsonValues: ${jsonValues}`)\r\n\r\n  var feeRate = 0;\r\n\r\n  if (parsedValues !== null) {\r\n    feeRate = parsedValues.feeRate ?? 0;\r\n  }\r\n\r\n  // trim records that have NaN as the number of shares\r\n  setters.feeRate(feeRate);\r\n}\r\n\r\n","export function calculateCostBasis(oldShares, oldCostBasis, addShares, currentPrice) {\r\n    const oldValue = oldShares * oldCostBasis;\r\n    const newValue = addShares * currentPrice;\r\n    var costBasis = 0;\r\n    if (oldValue !== 0 && newValue !== 0) {\r\n        costBasis = (oldValue + newValue) / (oldShares + addShares);\r\n        return costBasis;\r\n    }\r\n    else if (oldValue === 0 && newValue === 0) {\r\n        costBasis = 0;  // everything is zero\r\n    }\r\n    else if (oldValue === 0) {\r\n        costBasis = currentPrice; // only new purchases\r\n    }\r\n    else {\r\n        costBasis = oldCostBasis;   // no change\r\n    }\r\n    return costBasis;\r\n}\r\n","// NavBar example: https://stackoverflow.com/questions/51486024/bootstrap-navbar-with-react\r\n\r\nimport './App.css';\r\nimport CoinList from './components/CoinList/CoinList';\r\nimport ExchangeHeader from './components/ExchangeHeader/ExchangeHeader';\r\nimport BuyDialog from './components/BuyDialog/BuyDialog';\r\nimport BuyNewDialog from './components/BuyNewDialog/BuyNewDialog';\r\nimport SellDialog from './components/SellDialog/SellDialog';\r\nimport LoadingDialog from './components/LoadingDialog/LoadingDialog';\r\nimport SettingsDialog from './components/SettingsDialog/SettingsDialog';\r\nimport OverviewPanel from './components/OverviewPanel/OverviewPanel';\r\nimport AlertDialog from './components/AlertDialog/AlertDialog';\r\nimport HelpDialog from './components/HelpDialog/HelpDialog';\r\n\r\nimport 'bootswatch/dist/flatly/bootstrap.min.css';\r\nimport React from 'react';\r\nimport { ActionType } from './components/ActionType';\r\nimport { LoadingState } from './components/LoadingState';\r\nimport { createCoinBalance, saveCoinBalance, readCoinBalance, resetCoinBalance } from './functions/CoinBalance';\r\nimport { saveSettings, readSettings, resetSettings } from './functions/Settings';\r\nimport { getPriceFromTicker, getCoinTicker, resetCoinTicker, isCoinTickerRefreshNeeded } from './functions/CoinTicker'\r\nimport { calculateCostBasis } from './functions/costBasis';\r\n\r\nfunction App(props) {\r\n  const[totalDeposits, setTotalDeposits] = React.useState(0);\r\n  const[netBalance, setNetBalance] = React.useState(0);\r\n  const[cashAvailable, setCashAvailable] = React.useState(undefined);\r\n  const[feeRate, setFeeRate] = React.useState(undefined);\r\n  const[feeTotal, setFeeTotal] = React.useState(undefined);\r\n  const[showBalance, setShowBalance] = React.useState(false);\r\n  const[coinBalance, setCoinBalance] = React.useState(undefined);  // balances of each coin purchased\r\n  const[isHelpDialogOpen, setHelpDialogOpen] = React.useState(false);\r\n  const[isLoadingDialogOpen, setLoadingDialogOpen] = React.useState(LoadingState.Initial);\r\n  const[isBuyDialogOpen, setBuyDialogOpen] = React.useState(false);\r\n  const[isSellDialogOpen, setSellDialogOpen] = React.useState(false);\r\n  const[isBuyNewDialogOpen, setBuyNewDialogOpen] = React.useState(false);\r\n  const[isSettingsDialogOpen, setSettingsDialogOpen] = React.useState(false);\r\n  const[dialogTicker, setDialogTicker] = React.useState(\"\");  // ticker the dialogs operate on\r\n  const[initialValue, setInitialValue] = React.useState(0);\r\n  const[coinTicker, setCoinTicker] = React.useState(undefined);  // list of coins\r\n  const[quantity, setQuantity] = React.useState(0);     // dialogs quantity\r\n  const[statusBarText, setStatusBarText] = React.useState(\"Loading...\");\r\n  const[activityLog, setActivityLog] = React.useState([]);\r\n\r\n  // alert values\r\n  const[showAlert, setShowAlert] = React.useState(false);\r\n  const[alertHeading, setAlertHeading] = React.useState(\"\");\r\n  const[alertMessage, setAlertMessage] = React.useState(\"\");\r\n  const[alertButtonAcceptText, setAlertButtonAcceptText] = React.useState(\"\");\r\n  const[alertAcceptHandler, setAlertAcceptHandler] = React.useState(undefined);\r\n  const[alertCancelHandler, setAlertCancelHandler] = React.useState(undefined);\r\n\r\n  // 1 second timer used for updating the popup text over the refresh buttons\r\n  const [seconds, setSeconds] = React.useState(0);\r\n  const [lastRefresh, setLastRefresh] = React.useState(0);\r\n\r\n  const getFeeRate = () => {\r\n    return feeRate / 100;  // Make the used fees based on a percentage: 1% = 0.01\r\n  }\r\n  const calculateBalance = React.useCallback((bal = coinBalance, cash = cashAvailable, ticker = coinTicker) => { \r\n    if (typeof(coinTicker) == \"object\" &&\r\n      typeof(bal) == \"object\" &&\r\n      cash !== undefined && cash >= 0) {\r\n      var totalAvailable = cash;\r\n      bal.forEach(coin => {\r\n        totalAvailable += coin.shares * getPriceFromTicker(ticker, coin.ticker);\r\n      });\r\n      if (totalAvailable !== netBalance)\r\n        setNetBalance(totalAvailable);\r\n    }\r\n    else\r\n      if (0 !== netBalance)\r\n        setNetBalance(0);\r\n  }, [coinBalance, cashAvailable, coinTicker, netBalance]);\r\n\r\n  const isCoinTickerRefreshNeededCallBack = React.useCallback((coinTicker, lastRefresh) => {\r\n    return isCoinTickerRefreshNeeded(coinTicker, lastRefresh);\r\n  }, []);\r\n  \r\n  React.useEffect(() => {\r\n    const interval = setInterval(() => {\r\n    setSeconds(seconds => seconds + 1);\r\n    if (isCoinTickerRefreshNeededCallBack(coinTicker, lastRefresh)) {\r\n      setLastRefresh(Date.now());\r\n      getCoinTicker(setCoinTicker, setStatusBarText, calculateBalance);\r\n      saveCoinBalance({ balance: coinBalance, totalDeposits: totalDeposits, cash: cashAvailable, feesPaid: feeTotal, activityLog: activityLog });\r\n    }\r\n  }, 1000);\r\n  return () => clearInterval(interval);\r\n  }, [seconds, coinTicker, setCoinTicker, lastRefresh, setLastRefresh, setStatusBarText, calculateBalance, isCoinTickerRefreshNeededCallBack, \r\n    cashAvailable, feeTotal, coinBalance, activityLog, totalDeposits]);\r\n//React Hook React.useEffect has missing dependencies: 'cashAvailable', 'coinBalance', 'feeTotal', and 'totalDeposits'. \r\n  const closeHelpDialog = () => {\r\n    setHelpDialogOpen(false);\r\n  }\r\n  const closeAlertDialog = () => {\r\n    setShowAlert(false);\r\n  }\r\n  const closeSettingsDialog = () => {\r\n    setSettingsDialogOpen(false);\r\n  }\r\n  const closeBuyDialog = () => {\r\n    setBuyDialogOpen(false);\r\n  }\r\n  const closeSellDialog = () => {\r\n    setSellDialogOpen(false);\r\n  }\r\n  const closeBuyNewDialog = () => {\r\n    setBuyNewDialogOpen(false);\r\n  }\r\n  const closeLoadingDialog = () => {\r\n    setLoadingDialogOpen(LoadingState.Completed);\r\n    calculateBalance();\r\n  }\r\n\r\n  const onReloadLoadingDialog = () => {\r\n    if (coinBalance === undefined) {\r\n      readCoinBalance({ balance: setCoinBalance, totalDeposits: setTotalDeposits, cash: setCashAvailable, feesPaid: setFeeTotal, activityLog: setActivityLog });\r\n      readSettings({ feeRate: setFeeRate });\r\n    }\r\n  }\r\n\r\n  const reloadApp = () => {\r\n    setCoinTicker(undefined);\r\n    setCoinBalance(undefined);\r\n    setCashAvailable(undefined);\r\n    setFeeRate(undefined);\r\n    componentDidMount(true);\r\n  }\r\n\r\n  const componentDidMount = async (forcedReset = false) => {\r\n    if (isLoadingDialogOpen === LoadingState.Initial || forcedReset) {\r\n      setLoadingDialogOpen(LoadingState.Displayed);\r\n    }\r\n    getCoinTicker(setCoinTicker, setStatusBarText, calculateBalance);\r\n    if (coinBalance === undefined || forcedReset) {\r\n      readCoinBalance({ balance: setCoinBalance, totalDeposits: setTotalDeposits, cash: setCashAvailable, feesPaid: setFeeTotal, activityLog: setActivityLog });\r\n    }\r\n    if (feeRate === undefined || forcedReset) {\r\n      readSettings({ feeRate: setFeeRate });\r\n    }\r\n  }\r\n\r\n  React.useEffect(() => {\r\n    if (coinBalance === undefined) {\r\n      componentDidMount();\r\n    }\r\n  })\r\n\r\n  const toggleBalance = (showBalance) => {\r\n    setShowBalance(showBalance);\r\n    calculateBalance();\r\n  }\r\n\r\n  const handleDeposit = async (value) => {\r\n    const totalAvailable = cashAvailable + value;\r\n    const deposits = totalDeposits + value;\r\n    setCashAvailable(totalAvailable);\r\n    var timestamp = new Date(Date.now());\r\n    const logEntry = `Depositted $1000 at ${timestamp.toLocaleString()}`;\r\n    setActivityLog(activityLog => [...activityLog, logEntry]);\r\n    saveCoinBalance({ balance: coinBalance, totalDeposits: deposits, cash: totalAvailable, feesPaid: feeTotal, activityLog: activityLog });\r\n    calculateBalance(coinBalance, totalAvailable);\r\n    setTotalDeposits(deposits);\r\n    setStatusBarText(logEntry);\r\n  }\r\n\r\n  const handleWithdraw = async (value) => {\r\n    if (cashAvailable >= value) {\r\n      const totalAvailable = cashAvailable - value;\r\n      const deposits = totalDeposits - value;\r\n      setCashAvailable(totalAvailable);\r\n      var timestamp = new Date(Date.now());\r\n      const logEntry = `Withdrew $1000 at ${timestamp.toLocaleString()}`;\r\n      setActivityLog(activityLog => [...activityLog, logEntry]);\r\n        saveCoinBalance({ balance: coinBalance, totalDeposits: deposits, cash: totalAvailable, feesPaid: feeTotal, activityLog: activityLog });\r\n      calculateBalance(coinBalance, totalAvailable);\r\n      setTotalDeposits(deposits);\r\n      setStatusBarText(logEntry);\r\n    }\r\n  }\r\n  \r\n  const handleBuyMore = async (valueChangeTicker) => {\r\n    const foundCoin = coinBalance.find(coin => valueChangeTicker === coin.key);\r\n    setDialogTicker(foundCoin.ticker);\r\n    // setup modal\r\n    setActionTitle('Buy');\r\n    setModalTitle(`Buy ${foundCoin.ticker}`);\r\n    setInputTitle(`Spend cash available to purchase ${foundCoin.ticker}`);\r\n    setAvailability('Cash Available');\r\n    setInitialValue(0);\r\n    setQuantity(\"\");\r\n    setModalStatusMessage(buyMustBeGreaterThanZero);\r\n    setModalTextFieldStatus(false);\r\n    setBuyDialogOpen(true);\r\n  }\r\n  const updateModalTitles = (currentCoin) => {\r\n    if (currentCoin) {\r\n      setModalTitle(`Buy ${currentCoin.ticker}`);\r\n      setInputTitle(`Spend cash available to purchase ${currentCoin.ticker}`);\r\n    }\r\n    else {\r\n      setModalTitle(`Buy coins`);\r\n      setInputTitle(`Spend cash available to purchase coins`);\r\n    }\r\n  }\r\n  const selectCoin = (symbol) => {\r\n    var currentCoin = coinBalance.find(coin => symbol === coin.ticker);\r\n    // console.log(`selectCoin.symbol: ${symbol}`);\r\n    if (currentCoin === undefined) {\r\n      // console.log(`selectCoin: ${symbol} was not found, need to find it from the coinTicker`);\r\n      currentCoin = coinTicker.find(coin => symbol === coin.ticker);\r\n      // console.log(currentCoin);\r\n    }\r\n    updateModalTitles(currentCoin);\r\n    setDialogTicker(currentCoin.ticker);\r\n    return currentCoin;\r\n  }\r\n\r\n  const handleSellSome = async (valueChangeTicker) => {\r\n    const foundCoin = coinBalance.find(coin => valueChangeTicker === coin.key);\r\n    setDialogTicker(foundCoin.ticker);\r\n    // setup modal\r\n    setActionTitle('Sell');\r\n    setModalTitle(`Sell ${foundCoin.ticker}`);\r\n    setInputTitle(`Sell existing ${foundCoin.ticker} for cash`);\r\n    setAvailability('Shares Available');\r\n    setQuantity(\"\");\r\n    setInitialValue(0);\r\n    setModalStatusMessage(sellMustBeGreaterThanZero);\r\n    setModalTextFieldStatus(false);\r\n    setSellDialogOpen(true);\r\n  }\r\n\r\n  const handleBuyNew = async () => {\r\n    const ticker = dialogTicker ?? \"coins\";\r\n    // console.log(`handleBuyNew`);\r\n    setActionTitle('Buy');\r\n    setModalTitle(`Buy ${ticker}`);\r\n    setInputTitle(`Spend cash available to purchase ${ticker}`);\r\n    setAvailability('Cash Available');\r\n    setQuantity(\"\");\r\n    setInitialValue(0);\r\n    setModalStatusMessage(buyMustBeGreaterThanZero);\r\n    setModalTextFieldStatus(false);\r\n    setBuyNewDialogOpen(true);\r\n  }\r\n\r\n  const handleSettings = () => {\r\n    setSettingsDialogOpen(true);\r\n    setQuantity(feeRate);\r\n  }\r\n\r\n  const resetAllData = () => {\r\n    resetCoinTicker();\r\n    resetCoinBalance();\r\n    resetSettings();\r\n    reloadApp();\r\n    setStatusBarText(`All purchases/deposits have been erased`);\r\n  }\r\n\r\n  const resetCancelled = () => {\r\n  }\r\n\r\n  const handleReset = () => {\r\n    setShowAlert(true);\r\n    setSettingsDialogOpen(false);\r\n    setAlertHeading(\"Erase everything?\");\r\n    setAlertMessage(\"All of your purchases and deposits will be erased\");\r\n    setAlertButtonAcceptText(\"Erase\");\r\n    setAlertAcceptHandler({handler: resetAllData});\r\n    setAlertCancelHandler({handler: resetCancelled});\r\n  }\r\n\r\n  const handleAction = async (action, actionParameter) => {\r\n    switch (action) {\r\n      case ActionType.Reset:\r\n        handleReset(actionParameter);\r\n        break;\r\n      case ActionType.Settings:\r\n        handleSettings(actionParameter);  // opens SettingsDialog\r\n        break;\r\n      case ActionType.SaveSettings:\r\n        setFeeRate(actionParameter.feeRate);  // saves settings\r\n        saveSettings({ feeRate: actionParameter.feeRate });\r\n        break;\r\n      case ActionType.BuyMore:\r\n        handleBuyMore(actionParameter); // opens BuyDialog\r\n        break;\r\n      case ActionType.SellSome:\r\n        handleSellSome(actionParameter); // opens SellDialog\r\n        break;\r\n      case ActionType.ToggleBalance:\r\n        toggleBalance(actionParameter);\r\n        break;\r\n      case ActionType.Deposit:\r\n        handleDeposit(actionParameter);\r\n        break;\r\n      case ActionType.Withdraw:\r\n        handleWithdraw(actionParameter);\r\n        break;\r\n      case ActionType.BuyNew:\r\n        handleBuyNew(); // opens BuyNewDialog\r\n        break;\r\n      case ActionType.BuyShares:\r\n        buyShares(actionParameter.key, actionParameter.shares);\r\n        break;\r\n      case ActionType.SellShares:\r\n        sellShares(actionParameter.key, actionParameter.shares);\r\n        break;\r\n      case ActionType.Help:\r\n        showHelp();\r\n        break;\r\n      default:\r\n        throw Object.assign(new Error(`Unexpected action type: ${action}`), { code: 402 });\r\n    }\r\n  }\r\n\r\n  const showHelp = () => {\r\n    setHelpDialogOpen(true);\r\n  }\r\n\r\n  const sellShares = (key, quantity) => {\r\n    if (!dialogTicker) {\r\n      console.log(`Current ticker is null`);\r\n      return;\r\n    }\r\n    const changeCoin = coinBalance.find(coin => coin.ticker === dialogTicker);\r\n    if (!changeCoin) {\r\n      console.log(`${dialogTicker} wasn't found in coinBalance`);\r\n      return;\r\n    }\r\n    if (key !== changeCoin.key) {\r\n      console.log(`${key} doesn't match ${changeCoin.key}`);\r\n      return;\r\n    }\r\n    if (quantity > changeCoin.shares) {\r\n      console.log(`not enough ${changeCoin.ticker}`);\r\n      return;\r\n    }\r\n    const price = getPriceFromTicker(coinTicker, changeCoin.ticker);\r\n    var cost = quantity * price;\r\n    const sellFees = cost * getFeeRate();\r\n    const newCoinBalance = coinBalance.map(coin => {\r\n      if (coin.key === key) {\r\n        const newShares = coin.shares - quantity;\r\n        var newCoin = {...coin};\r\n        newCoin.costBasis = calculateCostBasis(coin.shares, coin.costBasis, -quantity, price);\r\n        newCoin.shares = newShares;\r\n        return newCoin; // include it even if its zero\r\n      }\r\n      return coin;\r\n    });\r\n    const cash = cashAvailable + (quantity * price) - sellFees;\r\n    const totalFeesPaid = feeTotal + sellFees;\r\n    setCashAvailable(cash);\r\n    calculateBalance(newCoinBalance, cash);\r\n    var statusText = `Sold ${quantity / price} shares of ${changeCoin.ticker} collecting $${quantity}`;\r\n    if (sellFees) {\r\n      statusText += ` paying $${sellFees} in fees`;\r\n    }\r\n    setFeeTotal(totalFeesPaid);\r\n    setStatusBarText(statusText);\r\n    console.log(statusText);\r\n    setCoinBalance(newCoinBalance);\r\n    setActivityLog(activityLog => [...activityLog, statusText]);\r\n  saveCoinBalance({ balance: newCoinBalance, totalDeposits: totalDeposits, cash: cash, feesPaid: totalFeesPaid, activityLog: activityLog });\r\n  }\r\n\r\n  const buyShares = (key, quantity) => {\r\n    if (quantity > cashAvailable) {\r\n      console.log(`not enough cach`);\r\n      return;\r\n    }\r\n    var newCoinBalance;\r\n    var buyFees = quantity * getFeeRate();\r\n    var price;\r\n    quantity -= buyFees;\r\n    var purchaseCoin = coinBalance.find(coin => key === coin.key);\r\n    if (!purchaseCoin) {\r\n      const ticker = coinTicker.find(coin => key === coin.key);\r\n      if (!ticker) {\r\n        console.log(`ticker ${key} was not found`);\r\n        return;\r\n      }\r\n      \r\n      purchaseCoin = createCoinBalance(ticker);\r\n      price = getPriceFromTicker(coinTicker, purchaseCoin.ticker);\r\n      purchaseCoin.shares = quantity / price;\r\n      purchaseCoin.costBasis = calculateCostBasis(0, 0, purchaseCoin.shares, price);\r\n      newCoinBalance = [...coinBalance];\r\n      newCoinBalance.push(purchaseCoin);\r\n    }\r\n    else {\r\n      price = getPriceFromTicker(coinTicker, purchaseCoin.ticker);\r\n      newCoinBalance = coinBalance.map(coin => {\r\n        if (coin.key === key) {\r\n          const newShares = quantity / price;\r\n          coin.costBasis = calculateCostBasis(coin.shares, coin.costBasis, newShares, price);\r\n          coin.shares = newShares + coin.shares;\r\n          if (coin.shares === 0)\r\n            return null;\r\n        }\r\n        return coin;\r\n      });\r\n    }\r\n    const cash = cashAvailable - (quantity + buyFees);\r\n    const totalFeesPaid = feeTotal + buyFees;\r\n    setFeeTotal(totalFeesPaid);\r\n    setCashAvailable(cash);\r\n    calculateBalance(newCoinBalance, cash);\r\n    var statusText = `Purchased ${quantity / price} shares of ${purchaseCoin.ticker} spending $${quantity}`;\r\n    if (buyFees) {\r\n      statusText += ` paying $${buyFees} in fees`;\r\n    }\r\n    setStatusBarText(statusText);\r\n    console.log(statusText);\r\n    setCoinBalance(newCoinBalance);\r\n    setActivityLog(activityLog => [...activityLog, statusText]);\r\n    saveCoinBalance({ balance: newCoinBalance, totalDeposits: totalDeposits, cash: cash, feesPaid: totalFeesPaid, activityLog: activityLog });\r\n  }\r\n\r\n  const buyMustBeGreaterThanZero = 'Amount to purchase must be greater than zero';\r\n  const sellMustBeGreaterThanZero = 'Number of shares to sell must be greater than zero';\r\n  const [modalStatusMessage, setModalStatusMessage] = React.useState(\"\");\r\n  const [modalTextFieldStatus, setModalTextFieldStatus] = React.useState(false);\r\n  const [modalTitle, setModalTitle] = React.useState(\"\");\r\n  const [inputTitle, setInputTitle] = React.useState(\"\");\r\n  const [actionTitle, setActionTitle] = React.useState(\"\");\r\n  const [availability, setAvailability] = React.useState(\"\");\r\n\r\n  const onSettingsValidator = (value) => {\r\n    setQuantity(value.feeRate);\r\n  }\r\n  const onModalSellValidator = (dollarAmount) => {\r\n    var value = dollarAmount;\r\n    if (typeof(dollarAmount) === \"string\") {\r\n      value = dollarAmount.replace(/[^\\d.-]/g, ''); // remove non-digits like $ or ,\r\n    }\r\n\r\n    const changeCoin = coinBalance.find(coin => coin.ticker === dialogTicker);\r\n    if (!changeCoin) {\r\n      console.log(`${dialogTicker} wasn't found in coinBalance`);\r\n      return;\r\n    }\r\n    setQuantity(value);\r\n    const amount = (value === undefined ? 0 : Number(value));\r\n    if (amount <= 0) {\r\n      setModalStatusMessage(sellMustBeGreaterThanZero);\r\n      setModalTextFieldStatus(false);\r\n    }\r\n    else if (amount > changeCoin.shares) {\r\n      setModalStatusMessage('Amount to sell exceeds shares available');\r\n      setModalTextFieldStatus(false);\r\n    }\r\n    else {\r\n      const price = getPriceFromTicker(coinTicker, changeCoin.ticker);\r\n      const shares = amount * price;\r\n      setModalStatusMessage(`Receive $${shares} for selling ${changeCoin.ticker}`);\r\n      setModalTextFieldStatus(true);\r\n    }\r\n  }\r\n  const onModalBuyValidator = (valueCoin) => {\r\n    const value = Number(valueCoin.quantity);\r\n    // console.log(value);\r\n    const coin = valueCoin.coin;\r\n    setQuantity(value);\r\n    const amount = (value === undefined || isNaN(value) ? 0 : Number(value));\r\n    setQuantity(amount);\r\n    if (amount <= 0 || isNaN(amount)) {\r\n      setModalStatusMessage(buyMustBeGreaterThanZero);\r\n      setModalTextFieldStatus(false);\r\n    }\r\n    else if (amount > cashAvailable) {\r\n      setModalStatusMessage('Amount to purchase exceeds cash available');\r\n      setModalTextFieldStatus(false);\r\n    }\r\n    else {\r\n      // console.log(JSON.stringify(coin));\r\n      const shares = amount / getPriceFromTicker(coinTicker, coin.ticker);\r\n      setModalStatusMessage(`Purchase ${shares} of ${coin.ticker}`);\r\n      setModalTextFieldStatus(true);\r\n    }\r\n    updateModalTitles(coin);\r\n  }\r\n\r\n  const sharesAvailableForSale = () => {\r\n    const changeCoin = coinBalance ? coinBalance.find(coin => coin.ticker === dialogTicker) : undefined;\r\n    return Boolean(!changeCoin) ? 0 : changeCoin.shares;\r\n  }\r\n  \r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"display-flex\">\r\n        <ExchangeHeader />\r\n        <OverviewPanel\r\n          totalDeposits={totalDeposits}\r\n          netBalance={netBalance} \r\n          feesCollected={feeTotal}\r\n          feeRate={feeRate}\r\n          cashAvailable={cashAvailable} \r\n          showBalance={showBalance}\r\n          handleAction={handleAction} />\r\n        <CoinList\r\n          coinBalance={coinBalance} \r\n          coinTicker={coinTicker}\r\n          showBalance={showBalance} \r\n          handleAction={handleAction} />\r\n        <div className=\"status-bar\">\r\n          <div>Status: </div>\r\n          <div className=\"status-bar-message\">{statusBarText}</div>\r\n        </div>\r\n      </div>\r\n      <BuyDialog show={isBuyDialogOpen} \r\n        cashSharesAvailable={cashAvailable} \r\n        dialogTicker={dialogTicker}\r\n        coinBalance={coinBalance} \r\n        coinTicker={coinTicker}\r\n        quantity={quantity}\r\n        initialValue={initialValue}\r\n        modalStatusMessage={modalStatusMessage}\r\n        modalTextFieldStatus={modalTextFieldStatus}\r\n        onValidator={onModalBuyValidator}\r\n        modalTitle={modalTitle}\r\n        inputTitle={inputTitle}\r\n        actionTitle={actionTitle}\r\n        availability={availability}\r\n        prefix=\"$\"\r\n        handleAction={handleAction}\r\n        handleClose={closeBuyDialog}/>\r\n      <SellDialog show={isSellDialogOpen} \r\n        cashSharesAvailable={sharesAvailableForSale()} \r\n        coinBalance={coinBalance} \r\n        coinTicker={coinTicker}\r\n        dialogTicker={dialogTicker}\r\n        quantity={quantity}\r\n        initialValue={initialValue}\r\n        modalStatusMessage={modalStatusMessage}\r\n        modalTextFieldStatus={modalTextFieldStatus}\r\n        onValidator={onModalSellValidator}\r\n        modalTitle={modalTitle}\r\n        inputTitle={inputTitle}\r\n        actionTitle={actionTitle}\r\n        availability={availability}\r\n        handleAction={handleAction}\r\n        handleClose={closeSellDialog}/>\r\n      <BuyNewDialog show={isBuyNewDialogOpen}\r\n        cashSharesAvailable={cashAvailable} \r\n        coinBalance={coinBalance} \r\n        coinTicker={coinTicker}\r\n        dialogTicker={dialogTicker}\r\n        modalStatusMessage={modalStatusMessage}\r\n        modalTextFieldStatus={modalTextFieldStatus}\r\n        onValidator={onModalBuyValidator}\r\n        modalTitle={modalTitle}\r\n        inputTitle={inputTitle}\r\n        actionTitle={actionTitle}\r\n        availability={availability}\r\n        selectCoin={selectCoin}\r\n        quantity={quantity}\r\n        handleAction={handleAction}\r\n        handleClose={closeBuyNewDialog}/>\r\n      <LoadingDialog show={isLoadingDialogOpen === LoadingState.Displayed}\r\n        coinBalance={coinBalance}\r\n        coinTicker={coinTicker}\r\n        settings={{feeRate: feeRate}}\r\n        modalTitle=\"Loading values\"\r\n        handleReload={onReloadLoadingDialog}\r\n        handleClose={closeLoadingDialog}/>\r\n      <SettingsDialog show={isSettingsDialogOpen} \r\n        modalTitle=\"Settings\"\r\n        inputTitle=\"Paper Coin Exchange Settings\"\r\n        settings={{feeRate: quantity}}\r\n        onValidator={onSettingsValidator}\r\n        handleAction={handleAction}\r\n        handleClose={closeSettingsDialog} />\r\n      <AlertDialog\r\n        alertHeading={alertHeading}\r\n        alertMessage={alertMessage}\r\n        alertButtonAcceptText={alertButtonAcceptText}\r\n        alertAcceptHandler={alertAcceptHandler}\r\n        alertCancelHandler={alertCancelHandler}\r\n        show={showAlert}\r\n        handleClose={closeAlertDialog}/>\r\n      <HelpDialog show={isHelpDialogOpen}\r\n        handleAction={handleAction}\r\n        totalDeposits={totalDeposits}\r\n        netBalance={netBalance}\r\n        showBalance={showBalance}\r\n        handleClose={closeHelpDialog}/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}