{"version":3,"sources":["components/ActionType.jsx","functions/formatPrice.js","components/AccountBalance/AccountBalance.jsx","components/Coin/Coin.jsx","components/CoinList/CoinList.jsx","components/ExchangeHeader/money.gif","components/ExchangeHeader/ExchangeHeader.jsx","components/CashAvailable/CashAvailable.jsx","components/BuyDialog/BuyDialog.jsx","components/BuyNewDialog/BuyNewDialog.jsx","components/SellDialog/SellDialog.jsx","components/LoadingDialog/LoadingDialog.jsx","components/LoadingState.jsx","functions/CoinBalance.jsx","functions/CoinTicker.jsx","functions/uniqueByKeepFirst.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["ActionType","formatPrice","price","digits","formattedPrice","parseFloat","Number","toFixed","Section","styled","section","AccountBalance","props","buttonText","showBalance","buttonClass","balanceText","amount","className","onClick","event","preventDefault","handleAction","Td","td","Coin","shares","name","ticker","id","CoinList","coinBalance","map","value","key","coinBalances","ExchangeHeader","src","logo","alt","Component","CashAvailable","cashText","buyEnabled","Boolean","coinTicker","disabled","BuyDialog","changeCoin","refreshButtonEnabled","divClass","modalTextFieldStatus","inputClass","feedbackClass","onValidator","quantity","coin","Modal","show","onHide","handleClose","backdrop","keyboard","Header","Title","modalTitle","Body","Table","availability","cashSharesAvailable","inputTitle","Button","variant","size","placeholder","decimalsLimit","allowNegativeValue","defaultValue","initialValue","prefix","intlConfig","locale","currency","onValueChange","changedText","modalStatusMessage","Footer","button","actionTitle","BuyNewDialog","callValidator","selectCoin","currentCoin","React","useState","filter","setFilter","currencyInputEnabled","selectedCoin","htmlFor","type","onChange","text","mapData","length","toLowerCase","includes","find","onFilterList","target","control","undefined","unshift","filterCoins","buttonAction","SellDialog","LoadingDialog","loadingMessage","status","seconds","setSeconds","reloadSeconds","setReloadSeconds","enableReloadButton","useEffect","interval","setInterval","cashAvailable","clearInterval","balancesStatus","tickersStatus","cashAvailableStatus","handleReload","LoadingState","createCoinBalance","coinBalanceFilename","saveCoinBalance","values","balances","isNaN","localStorage","setItem","JSON","stringify","readCoinBalance","setCoinBalance","parse","getItem","console","log","coinListFilename","readCoinTicker","setCoinTicker","coins","getTickers","a","axios","get","catch","error","getCoinTicker","then","listResponse","tickerMap","list","keys","Set","item","itemKey","has","add","uniqueByKeepFirst","data","symbol","quotes","last_updated","createCoinTicker","App","balance","setBalance","setCashAvailable","setShowBalance","isLoadingDialogOpen","setLoadingDialogOpen","isBuyDialogOpen","setBuyDialogOpen","isSellDialogOpen","setSellDialogOpen","isBuyNewDialogOpen","setBuyNewDialogOpen","setChangeCoin","setInitialValue","setQuantity","calculateBalance","bal","cash","total","forEach","coinCashAvailableFilename","saveCashAvailable","readCashAvailable","componentDidMount","toggleBalance","handleDeposit","handleWithdraw","handleBuyMore","valueChangeTicker","foundCoin","setActionTitle","setModalTitle","setInputTitle","setAvailability","setModalStatusMessage","buyMustBeGreaterThanZero","setModalTextFieldStatus","updateModalTitles","handleSellSome","sellMustBeGreaterThanZero","handleBuyNew","updateTickerPrice","response","newPrice","USD","newList","push","newCoinData","newValues","handleRefresh","result","action","actionParameter","buyShares","sellShares","Object","assign","Error","code","newCoinBalance","purchaseCoin","onModalBuyValidator","valueCoin","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ee2a92c8.chunk.js","sourcesContent":["const ActionType = {\r\n    Refresh: \"Refresh\", // refresh the price of the coin\r\n    BuyMore: \"BuyMore\", // but more of shares already owned\r\n    SellSome: \"SellSome\",   // sell existing shares\r\n    ToggleBalance: \"ToggleBalance\", // shows/hides the balances\r\n    Deposit: \"Deposit\",     // Deposit $1000\r\n    Withdraw: \"Withdraw\",   // Withdraw $1000\r\n    BuyNew: \"BuyNew\",   // list coins not owned to purchase dialog\r\n    BuyShares: \"BuyShares\",  // action resulting from clicking the Buy button\r\n    SellShares: \"SellShares\",  // action resulting from clicking the Sell button\r\n}\r\n\r\nexport { ActionType };\r\n","export const formatPrice = (price, digits = 4) => {\r\n    if (price === 0)\r\n        return price;\r\n    var formattedPrice = parseFloat(Number(price).toFixed(digits));\r\n    for (; formattedPrice === 0; ++digits) {\r\n        if (digits === 15)\r\n            return price;\r\n        formattedPrice = parseFloat(Number(price).toFixed(digits));\r\n    }\r\n    return formattedPrice;\r\n}\r\n","import PropTypes from 'prop-types';\r\nimport React from 'react'\r\nimport styled from 'styled-components';\r\nimport { ActionType } from '../ActionType';\r\nimport './AccountBalance.css';\r\nimport { formatPrice } from '../../functions/formatPrice';\r\n\r\nconst Section = styled.section`\r\n    border: 1px solid white;\r\n    font-size: 1.5rem;\r\n`;\r\n\r\nexport default function AccountBalance (props) {\r\n    const handleClick = (event) => {\r\n        event.preventDefault();\r\n        props.handleAction(ActionType.ToggleBalance, !props.showBalance);\r\n    }\r\n    const buttonText = props.showBalance ? 'Hide Balance' : 'Show Balance';\r\n    const buttonClass = 'btn ' + (props.showBalance ? 'btn-warning' : 'btn-info');\r\n    const balanceText = `Net Balance: $${props.showBalance ? formatPrice(props.amount, 2) : \" -\"}`;\r\n    return (\r\n        <Section className=\"balance\">\r\n            <div className=\"flex-filter\">\r\n                {balanceText}\r\n                <button \r\n                    className={buttonClass} onClick={handleClick} >{buttonText}</button>\r\n            </div>\r\n        </Section>\r\n    );\r\n}\r\n\r\nAccountBalance.propTypes = {\r\n    amount: PropTypes.number.isRequired,\r\n  }\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types';\r\nimport { ActionType } from '../ActionType';\r\n// import styled, { css } from 'styled-components';\r\nimport styled from 'styled-components';\r\nimport { formatPrice } from '../../functions/formatPrice'\r\nimport './Coin.css';\r\n\r\nconst Td = styled.td`\r\n    border: 2px solid #cccccc;\r\n    width: 25vh;\r\n`;\r\n\r\nexport default function Coin (props) {\r\n    const handleRefresh = (event) => {\r\n        event.preventDefault();\r\n        props.handleAction(ActionType.Refresh, props.id);\r\n    }\r\n    const handleBuyMore = (event) => {\r\n        event.preventDefault();\r\n        props.handleAction(ActionType.BuyMore, props.id);\r\n    }\r\n    const handleSellSome = (event) => {\r\n        event.preventDefault();\r\n        props.handleAction(ActionType.SellSome, props.id);\r\n    }\r\n    const balanceText = props.showBalance ? '$' + formatPrice(props.shares * props.price) : '-';\r\n    // console.log(`Coin: ${JSON.stringify(props)}`);\r\n    return (\r\n        <tr className=\"coin-row\">\r\n            <Td>{props.name}</Td>\r\n            <Td>{props.ticker}</Td>\r\n            <Td>{props.shares}</Td>\r\n            <Td>${formatPrice(props.price)}</Td>\r\n            <Td>{balanceText}</Td>\r\n            <Td>\r\n                <div>\r\n                    <button className=\"btn btn-info\" onClick={handleRefresh}>Refresh</button>\r\n                    <button className=\"btn btn-success\" onClick={handleBuyMore}>Buy</button>\r\n                    <button className=\"btn btn-danger\" onClick={handleSellSome}>Sell</button>\r\n                </div>\r\n            </Td>\r\n        </tr>\r\n    );\r\n}\r\n\r\nCoin.propTypes = {\r\n    id: PropTypes.string.isRequired,\r\n    name: PropTypes.string.isRequired,\r\n    ticker: PropTypes.string.isRequired,\r\n    price: PropTypes.number.isRequired,\r\n  }\r\n  \r\n  ","import React from 'react'\r\nimport Coin from '../Coin/Coin'\r\n\r\nexport default function CoinList (props) {\r\n    const coinBalances = () => {\r\n        if (props.coinBalance) {\r\n            // console.log(`CoinList: ${props.coinBalance} ${JSON.stringify(props.coinBalance)}`);\r\n            return props.coinBalance.map( value => \r\n                <Coin key={value.key} id={value.key}\r\n                showBalance={props.showBalance}\r\n                handleAction={props.handleAction} \r\n                    {...value} />\r\n            )\r\n        }\r\n    }\r\n    return (\r\n        <div>\r\n            <table className=\"table table-primary table-borders\">\r\n            <thead>\r\n                <tr>\r\n                <th>Name</th>\r\n                <th>Ticker</th>\r\n                <th>Shares</th>\r\n                <th>Price</th>\r\n                <th>Balance</th>\r\n                <th>Actions</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {coinBalances()}\r\n            </tbody>\r\n            </table>\r\n        </div>\r\n    )\r\n}\r\n","export default __webpack_public_path__ + \"static/media/money.7b6359b2.gif\";","import React, { Component } from 'react'\r\nimport logo from './money.gif'\r\nimport './ExchangeHeader.css';\r\n\r\nexport default class ExchangeHeader extends Component {\r\n    render() {\r\n        return (\r\n            <header className=\"App-header\">\r\n                <img src={logo} alt=\"React logo\" className=\"App-logo\" />\r\n                <h1 className=\"App-title\">\r\n                    Paper Coin Exchange\r\n                </h1>\r\n            </header>\r\n          )\r\n    }\r\n}\r\n","import React from 'react'\r\nimport './CashAvailable.css';\r\nimport { ActionType } from '../ActionType';\r\nimport { formatPrice } from '../../functions/formatPrice'\r\n\r\nexport default function CashAvailable (props) {\r\n    const cashText = `Cash Available: $${props.showBalance ? formatPrice(props.amount, 2) : \" -\"}`;\r\n    const handleClickBuyNew = (event) => {\r\n        event.preventDefault();\r\n        // popup a modal to let the user decide what coin & how much\r\n        props.handleAction(ActionType.BuyNew);\r\n    }\r\n    const handleClickDeposit = (event) => {\r\n        event.preventDefault();\r\n        // popup a modal to let the user decide how much\r\n        props.handleAction(ActionType.Deposit, 1000);\r\n    }\r\n    const handleClickWithdraw = (event) => {\r\n        event.preventDefault();\r\n        // popup a modal to let the user decide how much\r\n        props.handleAction(ActionType.Withdraw, 1000);\r\n    }\r\n    const buyEnabled = Boolean(props.coinTicker);\r\n    return (\r\n        <div className=\"cashavailable\">\r\n            {cashText}\r\n            <div className='btn-toolbar text-center well'>\r\n                <button className=\"btn btn-info\" onClick={handleClickDeposit} >Deposit</button>\r\n                <button className=\"btn btn-info\" onClick={handleClickWithdraw} >Withdraw</button>\r\n                <button className=\"btn btn-success\" disabled={!buyEnabled} onClick={handleClickBuyNew} >Buy</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { Modal, Button, Table } from 'react-bootstrap';\r\nimport CurrencyInput from 'react-currency-input-field';\r\nimport { ActionType } from '../ActionType';\r\n\r\nexport default function BuyDialog(props) {\r\n    const onBuy = (button) => {\r\n        props.handleAction(ActionType.BuyShares, { key: props.changeCoin.key, shares: props.quantity})\r\n        // console.log('buy: ', quantity);\r\n        props.handleClose();\r\n    }\r\n\r\n    const key = props.changeCoin ? props.changeCoin.key : null;\r\n    const refreshButtonEnabled = Boolean(key);\r\n    const ticker = props.changeCoin ? props.changeCoin.ticker : \"\";\r\n    const price = props.changeCoin ? props.changeCoin.price : \"\";\r\n    const divClass = (props.modalTextFieldStatus ? \"form-group has-success\" : \"form-group has-danger\");\r\n    const inputClass = (props.modalTextFieldStatus ? \"form-control is-valid\" : \"form-control is-invalid\");\r\n    const feedbackClass = (props.modalTextFieldStatus ? \"valid-feedback\" : \"invalid-feedback\");\r\n\r\n    const onAll = () => {\r\n        props.onValidator(props.cashSharesAvailable);\r\n    }\r\n    \r\n    const onRefresh = () => {\r\n        if (key)\r\n            props.handleAction(ActionType.Refresh, key);\r\n    }\r\n    \r\n    const handleCancel = () => {\r\n        props.handleClose();\r\n    }\r\n    \r\n    const callValidator = (quantity, coin) => {\r\n        props.onValidator({quantity: quantity, coin: coin});\r\n    }\r\n    const onValidator = (value) => {\r\n        callValidator(value, props.changeCoin);\r\n    }\r\n    return (\r\n        <Modal\r\n            show={props.show}\r\n            onHide={props.handleClose}\r\n            backdrop=\"static\"\r\n            keyboard={false}\r\n        >\r\n            <Modal.Header>\r\n                <Modal.Title>{props.modalTitle}</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n            <Table className=\"table table-primary table-borders\">\r\n                <tbody>\r\n                    <tr>\r\n                        <th>Coin</th>\r\n                        <td>{ticker}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <th>Price</th>\r\n                        <td>{price}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <th>{props.availability}</th>\r\n                        <td>{props.cashSharesAvailable}</td>\r\n                    </tr>\r\n                </tbody>\r\n            </Table>\r\n            <div className=\"flex-filter\">\r\n                {props.inputTitle}\r\n                <div>\r\n                    <Button variant=\"info\" size=\"sm\"\r\n                        disabled={!refreshButtonEnabled}\r\n                        onClick={onRefresh}>\r\n                        Refresh price\r\n                    </Button>\r\n                    <Button variant=\"danger\" size=\"sm\"\r\n                        onClick={onAll}>\r\n                        All\r\n                    </Button>\r\n                </div>\r\n            </div>\r\n            <div className={divClass}>\r\n                <CurrencyInput\r\n                    className={inputClass} \r\n                    id=\"text-input\" \r\n                    name=\"input-name\"\r\n                    placeholder=\"Please enter a dollar amount\"\r\n                    decimalsLimit={18}\r\n                    allowNegativeValue=\"false\"\r\n                    defaultValue={props.initialValue}\r\n                    prefix={props.prefix}\r\n                    intlConfig={{ locale: 'en-US', currency: 'USD' }}\r\n                    onValueChange={(changedText) => onValidator(changedText)}\r\n                />\r\n                <div className={feedbackClass}>{props.modalStatusMessage}</div>\r\n            </div>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <Button variant=\"secondary\" \r\n                    onClick={handleCancel}>\r\n                    Cancel\r\n                </Button>\r\n                <Button disabled={!props.modalTextFieldStatus} \r\n                    onClick={onBuy} \r\n                    variant=\"primary\">\r\n                    {props.actionTitle}\r\n                </Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    );\r\n}\r\n","import React from 'react'\r\nimport { Modal, Button, Table } from 'react-bootstrap';\r\nimport CurrencyInput from 'react-currency-input-field';\r\nimport { ActionType } from '../ActionType';\r\nimport './BuyNewDialog.css';\r\nimport { formatPrice } from '../../functions/formatPrice'\r\n//import Select from 'react-select';\r\n\r\nexport default function BuyNewDialog(props) {\r\n    const onBuy = (buttonAction) => {\r\n        props.handleAction(ActionType.BuyShares, { key: props.changeCoin.key, shares: props.quantity})\r\n        props.handleClose();\r\n    }\r\n    const onFilterList = (text) => {\r\n        setFilter(text);\r\n        var mapData = props.coinTicker.map (coin => {\r\n            if (filter.length === 0 || coin.ticker.toLowerCase().includes(text.toLowerCase())) {\r\n                return coin;\r\n            }\r\n            return null;\r\n        });\r\n        mapData = mapData.filter(Boolean);\r\n        const selectedCoin = props.changeCoin ? props.changeCoin.ticker : \"\";\r\n        // if the filter erases the selection, pick one of the remaining coins\r\n        const foundList = mapData.find((coin) => coin && selectedCoin === coin.ticker);\r\n        if (!foundList && mapData.length > 0) {\r\n            selectCoin(mapData[0].ticker);\r\n        }\r\n    }\r\n\r\n    const onAll = () => {\r\n        props.onValidator(props.cashSharesAvailable);\r\n    }\r\n    \r\n    const onRefresh = () => {\r\n        if (key)\r\n            props.handleAction(ActionType.Refresh, key);\r\n    }\r\n    \r\n    const handleCancel = () => {\r\n        props.handleClose();\r\n    }\r\n    const callValidator = (quantity, coin) => {\r\n        props.onValidator({quantity: quantity, coin: coin});\r\n    }\r\n    const onValidator = (value) => {\r\n        callValidator(value, props.changeCoin);\r\n    }\r\n    const onSelectCoin = (control) => {\r\n        selectCoin(control.target.value);\r\n    }\r\n    const selectCoin = (ticker) => {\r\n        const currentCoin = props.selectCoin(ticker);\r\n        callValidator(props.quantity, currentCoin);\r\n    }\r\n    const filterCoins = (filter) => {\r\n        if (props.coinTicker !== undefined && props.show === true) {\r\n            const mapData = props.coinTicker.map (coin => {\r\n                if (filter.length === 0 || coin.ticker.toLowerCase().includes(filter.toLowerCase())) {\r\n                    if (props.changeCoin && coin.ticker === props.changeCoin.ticker){\r\n                    }\r\n                    // console.log(`<option key=${coin.ticker} value=${coin.ticker} >${coin.ticker}</option>`)\r\n                    return <option key={coin.ticker} value={coin.ticker}  >{coin.ticker}</option>\r\n                }\r\n                return null;\r\n            });\r\n            // console.log(`<option key=\"null\" value=\"\" />`);\r\n            mapData.unshift(<option key=\"null\" value=\"\" />);\r\n            return mapData;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    const key = props.changeCoin ? props.changeCoin.key : null;\r\n    const refreshButtonEnabled = Boolean(key);\r\n    const ticker = props.changeCoin ? props.changeCoin.ticker : \"\";\r\n    const price = props.changeCoin ? formatPrice(props.changeCoin.price) : \"\";\r\n    const divClass = (props.modalTextFieldStatus ? \"form-group has-success\" : \"form-group has-danger\");\r\n    const inputClass = (props.modalTextFieldStatus ? \"form-control is-valid\" : \"form-control is-invalid\");\r\n    const feedbackClass = (props.modalTextFieldStatus ? \"valid-feedback\" : \"invalid-feedback\");\r\n    const [filter, setFilter] = React.useState(\"\");\r\n    const currencyInputEnabled = props.changeCoin ? true : false;\r\n    const selectedCoin = props.changeCoin ? props.changeCoin.ticker : \"\";\r\n    return (\r\n        <Modal\r\n            show={props.show}\r\n            onHide={props.handleClose}\r\n            backdrop=\"static\"\r\n            keyboard={false}\r\n        >\r\n            <Modal.Header>\r\n                <Modal.Title>{props.modalTitle}</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <div className=\"flex-filter\" id=\"filter-div\">\r\n                    <label htmlFor=\"filter-select\" className=\"form-label mt-4\">Select ticker</label>\r\n                    <div>\r\n                        <input type=\"text\"\r\n                            className=\"form-control\"\r\n                            id=\"filter-coins\" \r\n                            name=\"filter-coins\"\r\n                            placeholder=\"Filter list by ticker name\"\r\n                            onChange={(event) => onFilterList(event.target.value)}\r\n                        />\r\n                    </div>\r\n                </div>\r\n                <select className=\"form-select\" \r\n                    id=\"filter-select\" \r\n                    onChange={onSelectCoin}\r\n                    value={selectedCoin}\r\n                    placeholder=\"Select ticker name...\">\r\n                    {filterCoins(filter)}\r\n                </select>\r\n                <br/>\r\n                <Table className=\"table table-primary table-borders\">\r\n                    <tbody>\r\n                        <tr>\r\n                            <th>Coin</th>\r\n                            <td>{ticker}</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <th>Price</th>\r\n                            <td>{price}</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <th>{props.availability}</th>\r\n                            <td>{props.cashSharesAvailable}</td>\r\n                        </tr>\r\n                    </tbody>\r\n                </Table>\r\n                <div className=\"flex-filter\">\r\n                {props.inputTitle}\r\n                <div>\r\n                    <Button variant=\"info\" size=\"sm\"\r\n                        disabled={!refreshButtonEnabled}\r\n                        onClick={onRefresh}>\r\n                        Refresh price\r\n                    </Button>\r\n                    <Button variant=\"danger\" size=\"sm\"\r\n                        onClick={onAll}>\r\n                        All\r\n                    </Button>\r\n                </div>\r\n            </div>\r\n                <div className={divClass}>\r\n                    <CurrencyInput\r\n                        className={inputClass} \r\n                        id=\"text-input\" \r\n                        name=\"input-name\"\r\n                        placeholder=\"Please enter a dollar amount\"\r\n                        decimalsLimit={18}\r\n                        allowNegativeValue=\"false\"\r\n                        defaultValue={props.initialValue}\r\n                        disabled={!currencyInputEnabled}\r\n                        prefix={props.prefix}\r\n                        intlConfig={{ locale: 'en-US', currency: 'USD' }}\r\n                        onValueChange={(changedText) => onValidator(changedText)}\r\n                    />\r\n                    <div className={feedbackClass}>{props.modalStatusMessage}</div>\r\n                </div>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <Button variant=\"secondary\" \r\n                    onClick={handleCancel}>\r\n                    Cancel\r\n                </Button>\r\n                <Button disabled={!props.modalTextFieldStatus} \r\n                    onClick={onBuy} \r\n                    variant=\"primary\">\r\n                    {props.actionTitle}\r\n                </Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    );\r\n}\r\n\r\n","import React from 'react'\r\nimport { Modal, Button, Table } from 'react-bootstrap';\r\nimport { ActionType } from '../ActionType';\r\n\r\nexport default function SellDialog(props) {\r\n    const onSell = (event) => {\r\n        props.handleAction(ActionType.SellShares, { key: props.changeCoin.key, shares: props.quantity})\r\n        props.handleClose();\r\n    }\r\n\r\n    const key = props.changeCoin ? props.changeCoin.key : null;\r\n    const refreshButtonEnabled = Boolean(key);\r\n    const ticker = props.changeCoin ? props.changeCoin.ticker : \"\";\r\n    const price = props.changeCoin ? props.changeCoin.price : \"\";\r\n    const divClass = (props.modalTextFieldStatus ? \"form-group has-success\" : \"form-group has-danger\");\r\n    const inputClass = (props.modalTextFieldStatus ? \"form-control is-valid\" : \"form-control is-invalid\");\r\n    const feedbackClass = (props.modalTextFieldStatus ? \"valid-feedback\" : \"invalid-feedback\");\r\n\r\n    const handleCancel = () => {\r\n        props.handleClose();\r\n    }\r\n    \r\n    const onAll = () => {\r\n        props.onValidator(props.cashSharesAvailable);\r\n    }\r\n    \r\n    const onRefresh = () => {\r\n        if (key)\r\n            props.handleAction(ActionType.Refresh, key);\r\n    }\r\n    \r\n    return (\r\n        <Modal\r\n            show={props.show}\r\n            onHide={props.handleClose}\r\n            backdrop=\"static\"\r\n            keyboard={false}\r\n        >\r\n            <Modal.Header>\r\n                <Modal.Title>{props.modalTitle}</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n            <Table className=\"table table-primary table-borders\">\r\n                <tbody>\r\n                    <tr>\r\n                        <th>Coin</th>\r\n                        <td>{ticker}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <th>Price</th>\r\n                        <td>{price}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <th>{props.availability}</th>\r\n                        <td>{props.cashSharesAvailable}</td>\r\n                    </tr>\r\n                </tbody>\r\n            </Table>\r\n            <div className=\"flex-filter\">\r\n                {props.inputTitle}\r\n                <div>\r\n                    <Button variant=\"info\" size=\"sm\"\r\n                        disabled={!refreshButtonEnabled}\r\n                        onClick={onRefresh}>\r\n                        Refresh price\r\n                    </Button>\r\n                    <Button variant=\"danger\" size=\"sm\"\r\n                        onClick={onAll}>\r\n                        All\r\n                    </Button>\r\n                </div>\r\n            </div>\r\n            <div className={divClass}>\r\n                <input type=\"text\"\r\n                    className={inputClass} \r\n                    id=\"text-input\" \r\n                    value={props.quantity}\r\n                    name=\"input-name\"\r\n                    placeholder=\"Please enter number of shares to sell\"\r\n                    onChange={(event) => props.onValidator(event.target.value)}\r\n                />\r\n                <div className={feedbackClass}>{props.modalStatusMessage}</div>\r\n            </div>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <Button variant=\"secondary\" \r\n                    onClick={handleCancel}>\r\n                    Cancel\r\n                </Button>\r\n                <Button disabled={!props.modalTextFieldStatus} \r\n                    onClick={onSell} \r\n                    variant=\"primary\">\r\n                    {props.actionTitle}\r\n                </Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    );\r\n}\r\n","import React from 'react'\r\nimport { Modal, Button, Table } from 'react-bootstrap';\r\n\r\nexport default function LoadingDialog(props) {\r\n    const loadingMessage = (status) => {\r\n        return status ? \"Completed\" : \"Loading...\";\r\n    }\r\n    const balancesStatus = () => {\r\n        const status = Boolean(props.coinBalance);\r\n        return <div>\r\n            {loadingMessage(status)}\r\n        </div>\r\n    }\r\n    const tickersStatus = () => {\r\n        const status = Boolean(props.coinTicker);\r\n        return <div>\r\n            {loadingMessage(status)}\r\n        </div>\r\n    }\r\n    const cashAvailableStatus = () => {\r\n        const status = (props.cashAvailable !== undefined && props.cashAvailable >= 0);\r\n        return <div>\r\n            {loadingMessage(status)}\r\n        </div>\r\n    }\r\n    const [seconds, setSeconds] = React.useState(0);\r\n    const [reloadSeconds, setReloadSeconds] = React.useState(5);\r\n    const handleReload = () => {\r\n        props.handleReload();\r\n        setReloadSeconds(seconds + 5);\r\n    }\r\n    const enableReloadButton = seconds >= reloadSeconds;\r\n    React.useEffect(() => {\r\n        if (props.show) {\r\n            const interval = setInterval(() => {\r\n            // console.log(`props.coinBalance: ${Boolean(props.coinBalance)} ${props.coinBalance}`);\r\n            // console.log(`props.coinTicker: ${Boolean(props.coinTicker)}`);\r\n            // console.log(`props.cashAvailable: ${props.cashAvailable !== undefined && props.cashAvailable >= 0}`);\r\n            setSeconds(seconds => seconds + 1);\r\n            if (Boolean(props.coinBalance) &&\r\n                Boolean(props.coinTicker) &&\r\n                (props.cashAvailable !== undefined && props.cashAvailable >= 0)) {\r\n                // console.log(`Closing LoadingDialog...`);\r\n                props.handleClose();\r\n            }\r\n            }, 1000);\r\n            return () => clearInterval(interval);\r\n        }\r\n    }, [props]);\r\n    return (\r\n        <Modal\r\n            show={props.show}\r\n            onHide={props.handleClose}\r\n        >\r\n            <Modal.Header>\r\n                <Modal.Title>{props.modalTitle}</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <Table className=\"table table-primary table-borders\">\r\n                    <tbody>\r\n                        <tr>\r\n                            <th>Balances</th>\r\n                            <td>\r\n                                <div>\r\n                                    {balancesStatus()}\r\n                                </div>\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <th>Tickers</th>\r\n                            <td>\r\n                                <div>\r\n                                    {tickersStatus()}\r\n                                </div>\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <th>Cash Available</th>\r\n                            <td>\r\n                                <div>\r\n                                    {cashAvailableStatus()}\r\n                                </div>\r\n                            </td>\r\n                        </tr>\r\n                    </tbody>\r\n                </Table>\r\n                <p>{seconds} seconds have elapsed.</p>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <Button variant=\"primary\" \r\n                    disabled={!enableReloadButton}\r\n                    onClick={handleReload}>\r\n                    Attempt to reload\r\n                </Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    );\r\n}\r\n","const LoadingState = {\r\n    Initial: \"Initial\",\r\n    Displayed: \"Displayed\",\r\n    Completed: \"Completed\",\r\n}\r\n\r\nexport { LoadingState };\r\n","export const createCoinBalance = (coin) => {\r\n    return {\r\n        key: coin.key,\r\n        name: coin.name,\r\n        ticker: coin.ticker,\r\n        shares: 0,\r\n        price: coin.price,\r\n    }\r\n}\r\n\r\nconst coinBalanceFilename = 'PaperCoinBalance';\r\n\r\nexport const saveCoinBalance = (values) => {\r\n  const balances = values.filter(coin => coin && !isNaN(coin.shares) && coin.shares > 0);\r\n  // console.log(`balances: ${JSON.stringify(balances)}`);\r\n  localStorage.setItem(coinBalanceFilename, JSON.stringify(balances));\r\n}\r\n\r\nexport const readCoinBalance = (setCoinBalance) => {\r\n  var balances = JSON.parse(localStorage.getItem(coinBalanceFilename));\r\n  if (balances === null)\r\n    balances = [];\r\n  console.log(balances);\r\n  const noNan = balances.filter(coin => coin && !isNaN(coin.shares));\r\n  setCoinBalance(noNan);\r\n  return balances;\r\n}\r\n\r\n","import { uniqueByKeepFirst } from './uniqueByKeepFirst';\r\nimport axios from 'axios';\r\n\r\nexport const createCoinTicker = (coin) => {\r\n    return {\r\n      key: coin.id,\r\n      name: coin.name,\r\n      ticker: coin.symbol,\r\n      price: coin.quotes['USD'].price,\r\n      last_updated: coin.last_updated,\r\n    }\r\n}\r\n\r\n// how to read/write to localstorage: https://jsonworld.com/demo/how-to-use-localStorage-with-reactjs\r\nconst coinListFilename = 'PaperCoinList';\r\n\r\nexport const saveCoinTicker = (values) => {\r\n    localStorage.setItem(coinListFilename, JSON.stringify(values));\r\n}\r\n\r\nexport const readCoinTicker = (setCoinTicker) => {\r\n    const coins = JSON.parse(localStorage.getItem(coinListFilename));\r\n    // console.log(coins);\r\n    setCoinTicker(coins);\r\n    return coins;\r\n}\r\n\r\nconst getTickers = async (setCoinTicker) => {\r\n    return await axios.get('https://api.coinpaprika.com/v1/tickers').catch(function(error) {\r\n        debugger;\r\n        console.log(error);\r\n        console.log(`getCoinTicker reading old file from computer`);\r\n        return readCoinTicker(setCoinTicker);\r\n    });\r\n}\r\n\r\nexport const getCoinTicker = (coinTicker, setCoinTicker) => {\r\n    if (coinTicker === undefined) {\r\n        console.log(`getCoinTicker getting token list`);\r\n        getTickers(setCoinTicker).then(listResponse => {\r\n            if (listResponse !== undefined) {\r\n                const tickers = uniqueByKeepFirst(listResponse.data, key => key.symbol);\r\n                const tickerMap = tickers.map(coin => {\r\n                    return createCoinTicker(coin);\r\n                })\r\n                setCoinTicker(tickerMap);\r\n                saveCoinTicker(tickerMap);\r\n                return tickerMap;\r\n            }\r\n        });\r\n    }\r\n    return undefined;\r\n}\r\n","// copied from https://stackoverflow.com/questions/9229645/remove-duplicate-values-from-js-array\r\nexport function uniqueByKeepFirst(list, key) {\r\n    var keys = new Set();\r\n    if (list) {\r\n        return list.filter(item => {\r\n            const itemKey = key(item)\r\n            if (keys.has(itemKey)) {\r\n                return false; // key was already added\r\n            }\r\n            else {\r\n                keys.add(itemKey);  // add the key to the set\r\n                return item;\r\n            }\r\n        });\r\n    }\r\n    return list;\r\n}\r\n\r\n","import './App.css';\r\nimport AccountBalance from './components/AccountBalance/AccountBalance';\r\nimport CoinList from './components/CoinList/CoinList';\r\nimport ExchangeHeader from './components/ExchangeHeader/ExchangeHeader';\r\nimport CashAvailable from './components/CashAvailable/CashAvailable';\r\nimport BuyDialog from './components/BuyDialog/BuyDialog';\r\nimport BuyNewDialog from './components/BuyNewDialog/BuyNewDialog';\r\nimport SellDialog from './components/SellDialog/SellDialog';\r\nimport LoadingDialog from './components/LoadingDialog/LoadingDialog';\r\nimport 'bootswatch/dist/flatly/bootstrap.min.css';\r\nimport { formatPrice } from './functions/formatPrice'\r\nimport React from 'react';\r\nimport axios from 'axios';\r\nimport { ActionType } from './components/ActionType';\r\nimport { LoadingState } from './components/LoadingState';\r\nimport { createCoinBalance, saveCoinBalance, readCoinBalance } from './functions/CoinBalance';\r\nimport { getCoinTicker } from './functions/CoinTicker'\r\n\r\nfunction App(props) {\r\n  const[balance, setBalance] = React.useState(0);\r\n  const[cashAvailable, setCashAvailable] = React.useState(undefined);\r\n  const[showBalance, setShowBalance] = React.useState(false);\r\n  const[coinBalance, setCoinBalance] = React.useState(undefined);  // balances of each coin purchased\r\n  const[isLoadingDialogOpen, setLoadingDialogOpen] = React.useState(LoadingState.Initial);\r\n  const[isBuyDialogOpen, setBuyDialogOpen] = React.useState(false);\r\n  const[isSellDialogOpen, setSellDialogOpen] = React.useState(false);\r\n  const[isBuyNewDialogOpen, setBuyNewDialogOpen] = React.useState(false);\r\n  const[changeCoin, setChangeCoin] = React.useState(null);  // coin dialogs operate on\r\n  const[initialValue, setInitialValue] = React.useState(0);\r\n  const[coinTicker, setCoinTicker] = React.useState(undefined);  // list of coins\r\n  const[quantity, setQuantity] = React.useState(0);     // dialogs quantity\r\n\r\n  const closeBuyDialog = () => {\r\n    setBuyDialogOpen(false);\r\n  }\r\n  const closeSellDialog = () => {\r\n    setSellDialogOpen(false);\r\n  }\r\n  const closeBuyNewDialog = () => {\r\n    setBuyNewDialogOpen(false);\r\n  }\r\n  const closeLoadingDialog = () => {\r\n    setLoadingDialogOpen(LoadingState.Completed);\r\n    calculateBalance();\r\n  }\r\n\r\n  const calculateBalance = (bal = coinBalance, cash = cashAvailable) => {\r\n    if (typeof(coinTicker) == \"object\" &&\r\n      typeof(bal) == \"object\" &&\r\n      cash !== undefined && cash >= 0) {\r\n      var total = cash;\r\n      bal.forEach(coin => {\r\n        total += coin.shares * coin.price;\r\n      });\r\n      setBalance(total);\r\n    }\r\n    else\r\n      setBalance(0);\r\n  }\r\n\r\n  const coinCashAvailableFilename = \"PaperCashAvailable\";\r\n  const saveCashAvailable = (cash) => {\r\n    localStorage.setItem(coinCashAvailableFilename, JSON.stringify(cash));\r\n  }\r\n  const readCashAvailable = () => {\r\n    const cash = JSON.parse(localStorage.getItem(coinCashAvailableFilename));\r\n    setCashAvailable(cash ?? 0);\r\n  }\r\n\r\n  const onReloadLoadingDialog = () => {\r\n    if (coinTicker === null) {\r\n      getCoinTicker(coinTicker, setCoinTicker);\r\n    }\r\n    if (coinBalance === null) {\r\n      readCoinBalance(setCoinBalance);\r\n    }\r\n    if (cashAvailable === -1) {\r\n      readCashAvailable();\r\n    }\r\n  }\r\n  const componentDidMount = async () => {\r\n    if (isLoadingDialogOpen === LoadingState.Initial) {\r\n      setLoadingDialogOpen(LoadingState.Displayed);\r\n    }\r\n    if (coinTicker === undefined) {\r\n      setCoinTicker(null);\r\n      getCoinTicker(coinTicker, setCoinTicker);\r\n    }\r\n    if (coinBalance === undefined) {\r\n      setCoinBalance(null);\r\n      readCoinBalance(setCoinBalance);\r\n    }\r\n    if (cashAvailable === undefined) {\r\n      setCashAvailable(-1);\r\n      readCashAvailable();\r\n    }\r\n  }\r\n\r\n  React.useEffect(() => {\r\n    if (coinBalance === undefined) {\r\n      componentDidMount();\r\n    }\r\n  })\r\n\r\n  const toggleBalance = (showBalance) => {\r\n    setShowBalance(showBalance);\r\n    calculateBalance();\r\n  }\r\n\r\n  const handleDeposit = async (value) => {\r\n    const total = cashAvailable + value;\r\n    setCashAvailable(total);\r\n    saveCashAvailable(total);\r\n    calculateBalance(coinBalance, total);\r\n  }\r\n\r\n  const handleWithdraw = async (value) => {\r\n    if (cashAvailable >= value) {\r\n      const total = cashAvailable - value;\r\n      setCashAvailable(total);\r\n      saveCashAvailable(total);\r\n      calculateBalance(coinBalance, total);\r\n    }\r\n  }\r\n  \r\n  const handleBuyMore = async (valueChangeTicker) => {\r\n    const foundCoin = coinBalance.find(coin => valueChangeTicker === coin.key);\r\n    setChangeCoin(foundCoin);\r\n    // setup modal\r\n    setActionTitle('Buy');\r\n    setModalTitle(`Buy ${foundCoin.ticker}`);\r\n    setInputTitle(`Spend cash available to purchase ${foundCoin.ticker}`);\r\n    setAvailability('Cash Available');\r\n    setInitialValue(0);\r\n    setQuantity(0);\r\n    setModalStatusMessage(buyMustBeGreaterThanZero);\r\n    setModalTextFieldStatus(false);\r\n    setBuyDialogOpen(true);\r\n  }\r\n  const updateModalTitles = (currentCoin) => {\r\n    if (currentCoin) {\r\n      setModalTitle(`Buy ${currentCoin.ticker}`);\r\n      setInputTitle(`Spend cash available to purchase ${currentCoin.ticker}`);\r\n    }\r\n    else {\r\n      setModalTitle(`Buy coins`);\r\n      setInputTitle(`Spend cash available to purchase coins`);\r\n    }\r\n  }\r\n  const selectCoin = (symbol) => {\r\n    var currentCoin = coinBalance.find(coin => symbol === coin.ticker);\r\n    // console.log(`selectCoin.symbol: ${symbol}`);\r\n    if (currentCoin === undefined) {\r\n      // console.log(`selectCoin: ${symbol} was not found, need to find it from the coinTicker`);\r\n      currentCoin = coinTicker.find(coin => symbol === coin.ticker);\r\n      // console.log(currentCoin);\r\n    }\r\n    updateModalTitles(currentCoin);\r\n    setChangeCoin(currentCoin);\r\n    return currentCoin;\r\n  }\r\n\r\n  const handleSellSome = async (valueChangeTicker) => {\r\n    const foundCoin = coinBalance.find(coin => valueChangeTicker === coin.key);\r\n    setChangeCoin(foundCoin);\r\n    // setup modal\r\n    setActionTitle('Sell');\r\n    setModalTitle(`Sell ${foundCoin.ticker}`);\r\n    setInputTitle(`Sell existing ${foundCoin.ticker} for cash`);\r\n    setAvailability('Shares Available');\r\n    setQuantity(\"\");\r\n    setInitialValue(0);\r\n    setModalStatusMessage(sellMustBeGreaterThanZero);\r\n    setModalTextFieldStatus(false);\r\n    setSellDialogOpen(true);\r\n  }\r\n\r\n  const handleBuyNew = async (valueChangeTicker) => {\r\n    const ticker = (changeCoin == null ? \"coins\" : changeCoin.ticker);\r\n    console.log(`handleBuyNew`);\r\n    setActionTitle('Buy');\r\n    setModalTitle(`Buy ${ticker}`);\r\n    setInputTitle(`Spend cash available to purchase ${ticker}`);\r\n    setAvailability('Cash Available');\r\n    setQuantity(\"\");\r\n    setInitialValue(0);\r\n    setModalStatusMessage(buyMustBeGreaterThanZero);\r\n    setModalTextFieldStatus(false);\r\n    setBuyNewDialogOpen(true);\r\n  }\r\n\r\n  const updateTickerPrice = async (valueChangeTicker) => {\r\n    const response = await axios.get(`https://api.coinpaprika.com/v1/tickers/${valueChangeTicker}`);\r\n    const newPrice = formatPrice(response.data.quotes.USD.price);\r\n    var foundCoin = coinBalance.find(coin => valueChangeTicker === coin.key);\r\n    if (foundCoin === undefined) {\r\n      foundCoin = createCoinBalance(response.data);\r\n      const newList = [...coinBalance];\r\n      newList.push(foundCoin);\r\n      setCoinBalance(newList);\r\n      saveCoinBalance(newList);\r\n      calculateBalance(newList, cashAvailable);\r\n    }\r\n    else {\r\n      const newCoinData = coinBalance.map( function( values ) {\r\n        let newValues = {...values};\r\n        if (valueChangeTicker === values.key) {\r\n          newValues.price = newPrice;\r\n        }\r\n        return newValues;\r\n      });\r\n      setCoinBalance(newCoinData);\r\n      saveCoinBalance(newCoinData);\r\n      calculateBalance(newCoinData, cashAvailable);\r\n    }\r\n    console.log(`Updated price of ${foundCoin.ticker} to ${newPrice}`);\r\n    return foundCoin;\r\n  }\r\n\r\n  const handleRefresh = async (valueChangeTicker) => {\r\n    updateTickerPrice(valueChangeTicker).then(result => {\r\n      // make sure to update the coin for the dialogs\r\n      setChangeCoin(result);\r\n    });\r\n  }\r\n\r\n  const handleAction = async (action, actionParameter) => {\r\n    switch (action) {\r\n      case ActionType.Refresh:\r\n        handleRefresh(actionParameter);\r\n        break;\r\n      case ActionType.BuyMore:\r\n        handleBuyMore(actionParameter);\r\n        break;\r\n      case ActionType.SellSome:\r\n        handleSellSome(actionParameter);\r\n        break;\r\n      case ActionType.ToggleBalance:\r\n        toggleBalance(actionParameter);\r\n        break;\r\n      case ActionType.Deposit:\r\n        handleDeposit(actionParameter);\r\n        break;\r\n      case ActionType.Withdraw:\r\n        handleWithdraw(actionParameter);\r\n        break;\r\n      case ActionType.BuyNew:\r\n        handleBuyNew();\r\n        break;\r\n      case ActionType.BuyShares:\r\n        buyShares(actionParameter.key, actionParameter.shares);\r\n        break;\r\n      case ActionType.SellShares:\r\n        sellShares(actionParameter.key, actionParameter.shares);\r\n        break;\r\n      default:\r\n        throw Object.assign(new Error(`Unexpected action type: ${action}`), { code: 402 });\r\n    }\r\n  }\r\n  const sellShares = (key, quantity) => {\r\n    if (!changeCoin) {\r\n      console.log(`changeCoin is null`);\r\n      return;\r\n    }\r\n    if (key !== changeCoin.key) {\r\n      console.log(`${key} doesn't match ${changeCoin.key}`);\r\n      return;\r\n    }\r\n    if (quantity > changeCoin.shares) {\r\n      console.log(`not enough ${changeCoin.ticker}`);\r\n      return;\r\n    }\r\n    const newCoinBalance = coinBalance.map(coin => {\r\n      if (coin.key === key) {\r\n        coin.shares -= quantity;\r\n      }\r\n      return coin;\r\n    });\r\n    setCoinBalance(newCoinBalance);\r\n    saveCoinBalance(newCoinBalance);\r\n    const cash = cashAvailable + (quantity * changeCoin.price);\r\n    setCashAvailable(cash);\r\n    saveCashAvailable(cash);\r\n    calculateBalance(newCoinBalance, cash);\r\n  }\r\n  const buyShares = (key, quantity) => {\r\n    if (quantity > cashAvailable) {\r\n      console.log(`not enough cach`);\r\n      return;\r\n    }\r\n    var newCoinBalance;\r\n    var purchaseCoin = coinBalance.find(coin => key === coin.key);\r\n    if (!purchaseCoin) {\r\n      const ticker = coinTicker.find(coin => key === coin.key);\r\n      if (!ticker) {\r\n        console.log(`ticker ${key} was not found`);\r\n        return;\r\n      }\r\n      purchaseCoin = createCoinBalance(ticker);\r\n      purchaseCoin.shares = quantity / purchaseCoin.price;\r\n      newCoinBalance = [...coinBalance];\r\n      newCoinBalance.push(purchaseCoin);\r\n    }\r\n    else {\r\n      newCoinBalance = coinBalance.map(coin => {\r\n        if (coin.key === key) {\r\n          coin.shares += quantity / purchaseCoin.price;\r\n          if (coin.shares === 0)\r\n            return null;\r\n        }\r\n        return coin;\r\n      });\r\n    }\r\n    setCoinBalance(newCoinBalance);\r\n    saveCoinBalance(newCoinBalance);\r\n    const cash = cashAvailable - quantity;\r\n    setCashAvailable(cash);\r\n    saveCashAvailable(cash);\r\n    calculateBalance(newCoinBalance, cash);\r\n    console.log(`Purchased ${quantity / purchaseCoin.price} of ${purchaseCoin.ticker} spending $${quantity}`)\r\n  }\r\n  const buyMustBeGreaterThanZero = 'Amount to purchase must be greater than zero';\r\n  const sellMustBeGreaterThanZero = 'Number of shares to sell must be greater than zero';\r\n  const [modalStatusMessage, setModalStatusMessage] = React.useState(\"\");\r\n  const [modalTextFieldStatus, setModalTextFieldStatus] = React.useState(false);\r\n  const [modalTitle, setModalTitle] = React.useState(\"\");\r\n  const [inputTitle, setInputTitle] = React.useState(\"\");\r\n  const [actionTitle, setActionTitle] = React.useState(\"\");\r\n  const [availability, setAvailability] = React.useState(\"\");\r\n\r\n  const onModalSellValidator = (value) => {\r\n    setQuantity(value);\r\n    const amount = (value === undefined ? 0 : Number(value));\r\n    if (amount <= 0) {\r\n      setModalStatusMessage(sellMustBeGreaterThanZero);\r\n      setModalTextFieldStatus(false);\r\n    }\r\n    else if (amount > changeCoin.shares) {\r\n      setModalStatusMessage('Amount to sell exceeds shares available');\r\n      setModalTextFieldStatus(false);\r\n    }\r\n    else {\r\n      const shares = amount * changeCoin.price;\r\n      setModalStatusMessage(`Receive $${shares} for selling ${changeCoin.ticker}`);\r\n      setModalTextFieldStatus(true);\r\n    }\r\n  }\r\n  const onModalBuyValidator = (valueCoin) => {\r\n    const value = Number(valueCoin.quantity);\r\n    const coin = valueCoin.coin;\r\n    setQuantity(value);\r\n    const amount = (value === undefined ? 0 : Number(value));\r\n    if (amount <= 0) {\r\n      setModalStatusMessage(buyMustBeGreaterThanZero);\r\n      setModalTextFieldStatus(false);\r\n    }\r\n    else if (amount > cashAvailable) {\r\n      setModalStatusMessage('Amount to purchase exceeds cash available');\r\n      setModalTextFieldStatus(false);\r\n    }\r\n    else {\r\n      console.log(JSON.stringify(coin));\r\n      const shares = amount / coin.price;\r\n      setModalStatusMessage(`Purchase ${shares} of ${coin.ticker}`);\r\n      setModalTextFieldStatus(true);\r\n    }\r\n    updateModalTitles(coin);\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <ExchangeHeader />\r\n      <AccountBalance handleAction={handleAction} \r\n        amount={balance} \r\n        showBalance={showBalance} />\r\n      <CashAvailable handleAction={handleAction}\r\n        coinTicker={coinTicker}\r\n        showBalance={showBalance}\r\n        amount={cashAvailable} />\r\n      <CoinList coinBalance={coinBalance} \r\n        showBalance={showBalance} \r\n        handleAction={handleAction} />\r\n      <BuyDialog show={isBuyDialogOpen} \r\n        cashSharesAvailable={cashAvailable} \r\n        changeCoin={changeCoin}\r\n        quantity={quantity}\r\n        initialValue={initialValue}\r\n        modalStatusMessage={modalStatusMessage}\r\n        modalTextFieldStatus={modalTextFieldStatus}\r\n        onValidator={onModalBuyValidator}\r\n        modalTitle={modalTitle}\r\n        inputTitle={inputTitle}\r\n        actionTitle={actionTitle}\r\n        availability={availability}\r\n        prefix=\"$\"\r\n        handleAction={handleAction}\r\n        handleClose={closeBuyDialog}/>\r\n      <SellDialog show={isSellDialogOpen} \r\n        cashSharesAvailable={changeCoin == null ? 0 : changeCoin.shares} \r\n        changeCoin={changeCoin}\r\n        quantity={quantity}\r\n        initialValue={initialValue}\r\n        modalStatusMessage={modalStatusMessage}\r\n        modalTextFieldStatus={modalTextFieldStatus}\r\n        onValidator={onModalSellValidator}\r\n        modalTitle={modalTitle}\r\n        inputTitle={inputTitle}\r\n        actionTitle={actionTitle}\r\n        availability={availability}\r\n        handleAction={handleAction}\r\n        handleClose={closeSellDialog}/>\r\n      <BuyNewDialog show={isBuyNewDialogOpen}\r\n        cashSharesAvailable={cashAvailable} \r\n        coinTicker={coinTicker}\r\n        changeCoin={changeCoin}\r\n        modalStatusMessage={modalStatusMessage}\r\n        modalTextFieldStatus={modalTextFieldStatus}\r\n        onValidator={onModalBuyValidator}\r\n        modalTitle={modalTitle}\r\n        inputTitle={inputTitle}\r\n        actionTitle={actionTitle}\r\n        availability={availability}\r\n        selectCoin={selectCoin}\r\n        quantity={quantity}\r\n        handleAction={handleAction}\r\n        handleClose={closeBuyNewDialog}/>\r\n      <LoadingDialog show={isLoadingDialogOpen === LoadingState.Displayed}\r\n        coinBalance={coinBalance}\r\n        coinTicker={coinTicker}\r\n        cashAvailable={cashAvailable}\r\n        modalTitle=\"Loading values\"\r\n        handleReload={onReloadLoadingDialog}\r\n        handleClose={closeLoadingDialog}/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}