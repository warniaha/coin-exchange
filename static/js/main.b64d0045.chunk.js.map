{"version":3,"sources":["components/PopupButton.jsx","components/PopupDiv.jsx","components/ActionType.jsx","functions/formatPrice.js","functions/CoinTicker.jsx","functions/uniqueByKeepFirst.jsx","functions/ProfitMessage.jsx","components/Coin/Coin.jsx","components/CoinList/CoinList.jsx","components/ExchangeHeader/ExchangeHeader.jsx","components/BuyDialog/BuyDialog.jsx","components/BuyNewDialog/BuyNewDialog.jsx","components/SellDialog/SellDialog.jsx","components/LoadingDialog/LoadingDialog.jsx","components/SettingsDialog/SettingsDialog.jsx","functions/StringTable.jsx","components/OverviewPanel/OverviewPanel.jsx","components/AlertDialog/AlertDialog.jsx","components/HelpDialog/HelpDialog.jsx","components/LoadingState.jsx","functions/CoinBalance.jsx","functions/Settings.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["PopupButton","props","divStyle","disabled","display","cursor","buttonStyle","pointerEvents","OverlayTrigger","placement","trigger","overlay","Popover","Title","popup","style","Button","onClick","variant","text","PopupDiv","ActionType","Settings","BuyMore","SellSome","ToggleBalance","Deposit","Withdraw","BuyNew","BuyShares","SellShares","SaveSettings","Help","formatPrice","price","digits","formattedPrice","parseFloat","Number","toFixed","coinListFilename","readCoinTicker","setCoinTicker","coins","JSON","parse","localStorage","getItem","getPriceFromTicker","coinTicker","ticker","coin","find","item","undefined","getTickers","a","axios","get","catch","error","console","log","getCoinTicker","setStatusBarText","calculateBalance","then","listResponse","tickers","list","key","keys","Set","filter","itemKey","has","add","uniqueByKeepFirst","data","symbol","tickerMap","map","id","name","quotes","last_updated","last_refresh","createCoinTicker","values","setItem","stringify","timestamp","Date","now","toLocaleString","reason","profitMessage","showBalance","profitAmount","profitPopupMessage","Td","styled","td","Coin","netBalance","shares","profit","costBasis","profitLossClass","arrowCharacter","balanceText","basisText","buyPopupText","sellPopupText","balancePopupMessage","className","event","preventDefault","handleAction","CoinList","coinBalance","value","coinBalances","ExchangeHeader","Component","BuyDialog","changeCoin","dialogTicker","divClass","modalTextFieldStatus","inputClass","feedbackClass","onValidator","quantity","Modal","show","onHide","handleClose","backdrop","keyboard","Header","modalTitle","Body","Table","availability","cashSharesAvailable","inputTitle","size","placeholder","decimalsLimit","allowNegativeValue","defaultValue","initialValue","prefix","intlConfig","locale","currency","onValueChange","changedText","modalStatusMessage","Footer","button","actionTitle","BuyNewDialog","callValidator","selectCoin","currentCoin","matchesFilter","length","toLowerCase","includes","React","useState","setFilter","currencyInputEnabled","htmlFor","type","onChange","mapData","Boolean","onFilterList","target","control","unshift","filterCoins","buttonAction","SellDialog","LoadingDialog","loadingMessage","status","seconds","setSeconds","reloadSeconds","setReloadSeconds","enableReloadButton","useEffect","interval","setInterval","settings","feeRate","clearInterval","balancesStatus","tickersStatus","settingsStatus","handleReload","SettingsDialog","nobodyLooking","pryingEyes","OverviewPanel","totalDeposits","feesCollected","showHideBalanceText","showHideBalancePopup","showHideBalanceVariant","cashAvailable","withdrawEnabled","withdrawPopupText","netBalancePopupMessage","ButtonToolbar","ButtonGroup","Reset","AlertDialog","isAcceptanceButtonPresent","alertAcceptHandler","handler","alertButtonAcceptText","alertHeading","alertMessage","alertCancelHandler","HelpDialog","setKey","tabsList","showHideBalanceDescription","netBalanceDescription","Tabs","onSelect","k","activeKey","eventKey","title","LoadingState","coinBalanceFilename","saveCoinBalance","balances","balance","isNaN","balanceJson","cash","feesPaid","readCoinBalance","setters","jsonValues","parsedValues","noNan","settingsFilename","saveSettings","settingsJson","readSettings","App","setTotalDeposits","setNetBalance","setCashAvailable","setFeeRate","feeTotal","setFeeTotal","setShowBalance","setCoinBalance","isHelpDialogOpen","setHelpDialogOpen","isLoadingDialogOpen","setLoadingDialogOpen","isBuyDialogOpen","setBuyDialogOpen","isSellDialogOpen","setSellDialogOpen","isBuyNewDialogOpen","setBuyNewDialogOpen","isSettingsDialogOpen","setSettingsDialogOpen","setDialogTicker","setInitialValue","setQuantity","statusBarText","showAlert","setShowAlert","setAlertHeading","setAlertMessage","setAlertButtonAcceptText","setAlertAcceptHandler","setAlertCancelHandler","minutesAsSeconds","num","bal","totalAvailable","forEach","lastRefresh","setLastRefresh","bitCoin","priceAge","lastRefreshSeconds","priceAgeSeconds","isRefreshNeeded","componentDidMount","forcedReset","toggleBalance","handleDeposit","deposits","handleWithdraw","handleBuyMore","valueChangeTicker","foundCoin","setActionTitle","setModalTitle","setInputTitle","setAvailability","setModalStatusMessage","buyMustBeGreaterThanZero","setModalTextFieldStatus","updateModalTitles","handleSellSome","sellMustBeGreaterThanZero","handleBuyNew","resetAllData","removeItem","resetCancelled","action","actionParameter","buyShares","sellShares","showHelp","Object","assign","Error","code","sellFees","newCoinBalance","newShares","newCoin","totalFeesPaid","statusText","buyFees","purchaseCoin","push","onModalBuyValidator","valueCoin","amount","sharesAvailableForSale","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b64d0045.chunk.js","sourcesContent":["import React from 'react'\r\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\r\nimport Popover from 'react-bootstrap/Popover'\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nexport default function PopupButton (props) {\r\n    const divStyle = props.disabled ? {display: 'inline-block', cursor: 'not-allowed'} : {};\r\n    const buttonStyle = props.disabled ? {pointerEvents : 'none'} : {};\r\n    return (\r\n        <OverlayTrigger\r\n            placement=\"top\"\r\n            trigger={[\"hover\", \"focus\"]}\r\n            overlay={(\r\n                <Popover>\r\n                    <Popover.Title>\r\n                        {props.popup}\r\n                    </Popover.Title>\r\n                </Popover>\r\n            )}>\r\n            <div style={divStyle}>\r\n                <Button \r\n                    onClick={props.onClick} \r\n                    style={buttonStyle} \r\n                    disabled={props.disabled} \r\n                    variant={props.variant}>\r\n                    {props.text}\r\n                </Button>\r\n            </div>\r\n        </OverlayTrigger>\r\n    );\r\n}\r\n","import React from 'react'\r\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\r\nimport Popover from 'react-bootstrap/Popover'\r\n\r\nexport default function PopupDiv (props) {\r\n    const divStyle = props.disabled ? {display: 'inline-block', cursor: 'not-allowed'} : {};\r\n    return (\r\n        <OverlayTrigger\r\n            placement=\"top\"\r\n            trigger={[\"hover\", \"focus\"]}\r\n            overlay={(\r\n                <Popover>\r\n                    <Popover.Title>\r\n                        {props.popup}\r\n                    </Popover.Title>\r\n                </Popover>\r\n            )}>\r\n            <div style={divStyle}>\r\n                {props.text}\r\n            </div>\r\n        </OverlayTrigger>\r\n    );\r\n}\r\n","const ActionType = {\r\n    Settings: \"Settings\", // settings dialog\r\n    BuyMore: \"BuyMore\", // but more of shares already owned\r\n    SellSome: \"SellSome\",   // sell existing shares\r\n    ToggleBalance: \"ToggleBalance\", // shows/hides the balances\r\n    Deposit: \"Deposit\",     // Deposit $1000\r\n    Withdraw: \"Withdraw\",   // Withdraw $1000\r\n    BuyNew: \"BuyNew\",   // list coins not owned to purchase dialog\r\n    BuyShares: \"BuyShares\",  // action resulting from clicking the Buy button\r\n    SellShares: \"SellShares\",  // action resulting from clicking the Sell button\r\n    SaveSettings: \"SaveSettings\",   // save settings from the SettingsDialog\r\n    Help: \"Help\",   // Show the help window\r\n}\r\n\r\nexport { ActionType };\r\n","export const formatPrice = (price, digits = 4) => {\r\n    if (price === 0)\r\n        return price;\r\n    var formattedPrice = parseFloat(Number(price).toFixed(digits));\r\n    for (; formattedPrice === 0; ++digits) {\r\n        if (digits === 15)\r\n            return price;\r\n        formattedPrice = parseFloat(Number(price).toFixed(digits));\r\n    }\r\n    return formattedPrice;\r\n}\r\n","import { uniqueByKeepFirst } from './uniqueByKeepFirst';\r\nimport axios from 'axios';\r\n\r\nexport const createCoinTicker = (coin) => {\r\n    return {\r\n      key: coin.id,\r\n      name: coin.name,\r\n      ticker: coin.symbol,\r\n      price: coin.quotes['USD'].price,\r\n      last_updated: coin.last_updated,\r\n      last_refresh: coin.last_updated,\r\n    }\r\n}\r\n\r\n// how to read/write to localstorage: https://jsonworld.com/demo/how-to-use-localStorage-with-reactjs\r\nconst coinListFilename = 'PaperCoinList';\r\n\r\nexport const resetCoinTicker = () => {\r\n    localStorage.removeItem(coinListFilename);\r\n}\r\n\r\nexport const saveCoinTicker = (values) => {\r\n    localStorage.setItem(coinListFilename, JSON.stringify(values));\r\n}\r\n\r\nexport const readCoinTicker = (setCoinTicker) => {\r\n    const coins = JSON.parse(localStorage.getItem(coinListFilename));\r\n    // console.log(coins);\r\n    if (coins)\r\n        setCoinTicker(coins);\r\n    return coins;\r\n}\r\n\r\nexport const getPriceFromTicker = (coinTicker, ticker) => {\r\n    const coin = coinTicker ? coinTicker.find(item => item.ticker === ticker) : undefined;\r\n    return coin ? coin.price : \"\";\r\n}\r\n\r\nconst getTickers = async (setCoinTicker) => {\r\n    return await axios.get('https://api.coinpaprika.com/v1/tickers').catch(function(error) {\r\n        console.log(error);\r\n        console.log(`getTickers reading old file from computer`);\r\n        return readCoinTicker(setCoinTicker);\r\n    });\r\n}\r\n\r\nexport const getCoinTicker = (setCoinTicker, setStatusBarText, calculateBalance) => {\r\n    // console.log(`getCoinTicker getting token list`);\r\n    getTickers(setCoinTicker).then(listResponse => {\r\n        if (listResponse !== undefined) {\r\n            const tickers = uniqueByKeepFirst(listResponse.data, key => key.symbol);\r\n            if (tickers) {\r\n                const tickerMap = tickers.map(coin => {\r\n                    return createCoinTicker(coin);\r\n                })\r\n                setCoinTicker(tickerMap);\r\n                saveCoinTicker(tickerMap);\r\n                var timestamp = new Date(Date.now());\r\n                setStatusBarText(`Prices updated at: ${timestamp.toLocaleString()}`);\r\n                calculateBalance();\r\n            }\r\n        }\r\n    }, reason => {\r\n        setStatusBarText(`Failed to load prices: ${reason}`);\r\n        console.log(`getCoinTicker failed: ${reason}`);\r\n    });\r\n}\r\n","// copied from https://stackoverflow.com/questions/9229645/remove-duplicate-values-from-js-array\r\nexport function uniqueByKeepFirst(list, key) {\r\n    var keys = new Set();\r\n    if (list) {\r\n        return list.filter(item => {\r\n            const itemKey = key(item)\r\n            if (keys.has(itemKey)) {\r\n                return false; // key was already added\r\n            }\r\n            else {\r\n                keys.add(itemKey);  // add the key to the set\r\n                return item;\r\n            }\r\n        });\r\n    }\r\n    return list;\r\n}\r\n\r\n","import { formatPrice } from './formatPrice';\r\n\r\nexport function profitMessage(showBalance, profitAmount) {\r\n    var profitPopupMessage = formatPrice(profitAmount, 2);\r\n    if (profitAmount === 0)\r\n        return 'No gain, no loss';\r\n    if (showBalance)\r\n        return profitAmount >= 0 ? `Profitted by $${profitPopupMessage}` : `Loss of $${profitPopupMessage}`;\r\n    else\r\n        return profitAmount >= 0 ? `Profittable` : `Loss encountered`;\r\n}\r\n","import React from 'react';\r\nimport PopupButton from '../PopupButton';\r\nimport PopupDiv from '../PopupDiv';\r\nimport PropTypes from 'prop-types';\r\nimport { ActionType } from '../ActionType';\r\n// import styled, { css } from 'styled-components';\r\nimport styled from 'styled-components';\r\nimport { formatPrice } from '../../functions/formatPrice';\r\nimport './Coin.css';\r\nimport { getPriceFromTicker } from '../../functions/CoinTicker'\r\nimport { profitMessage } from '../../functions/ProfitMessage';\r\n\r\nconst Td = styled.td`\r\n    border: 2px solid #cccccc;\r\n    width: 25vh;\r\n`;\r\nexport default function Coin (props) {\r\n    const handleBuyMore = (event) => {\r\n        event.preventDefault();\r\n        props.handleAction(ActionType.BuyMore, props.id);\r\n    }\r\n    const handleSellSome = (event) => {\r\n        event.preventDefault();\r\n        props.handleAction(ActionType.SellSome, props.id);\r\n    }\r\n    const price = getPriceFromTicker(props.coinTicker, props.ticker);\r\n    const netBalance = props.shares * price;\r\n    const profit = netBalance - (props.shares * props.costBasis);\r\n    const profitLossClass = profit >= 0 ? \"price-profit\" : \"price-loss\"\r\n    const arrowCharacter = profit >= 0 ? \"▲\" : \"▼\";\r\n    const balanceText = props.showBalance ? '$' + formatPrice(netBalance) : arrowCharacter;\r\n    const basisText = props.showBalance ? '$' + formatPrice(props.costBasis) : '-';\r\n    const buyPopupText = `Buy more ${props.ticker}`;\r\n    const sellPopupText = `Sell your ${props.ticker}`;\r\n    const balancePopupMessage = profitMessage(props.showBalance, profit);\r\n    // console.log(`Coin: coinTicker: ${JSON.stringify(props)}`);\r\n\r\n    return (\r\n        <tr className=\"coin-row\">\r\n            <Td>{props.name}</Td>\r\n            <Td>{props.ticker}</Td>\r\n            <Td>{props.shares}</Td>\r\n            <Td>${formatPrice(price)}</Td>\r\n            <Td>{basisText}</Td>\r\n            <Td>\r\n                <div className={profitLossClass}>\r\n                <PopupDiv\r\n                    popup={balancePopupMessage}\r\n                    text={balanceText}\r\n                    disabled={false} />\r\n                </div>\r\n            </Td>\r\n            <Td>\r\n                <div className=\"td-action-buttons\">\r\n                    <PopupButton\r\n                        disabled={false} \r\n                        variant=\"success\"\r\n                        popup={buyPopupText}\r\n                        text=\"Buy\"\r\n                        onClick={handleBuyMore} />\r\n                    <PopupButton\r\n                        disabled={false} \r\n                        variant=\"danger\"\r\n                        popup={sellPopupText}\r\n                        text=\"Sell\"\r\n                        onClick={handleSellSome} />\r\n                </div>\r\n            </Td>\r\n        </tr>\r\n    );\r\n}\r\n\r\nCoin.propTypes = {\r\n    id: PropTypes.string.isRequired,\r\n    name: PropTypes.string.isRequired,\r\n    ticker: PropTypes.string.isRequired,\r\n    shares: PropTypes.number.isRequired,\r\n    costBasis: PropTypes.number.isRequired,\r\n}\r\n  \r\n  ","import React from 'react'\r\nimport Coin from '../Coin/Coin'\r\n\r\nexport default function CoinList (props) {\r\n    const coinBalances = () => {\r\n        if (props.coinBalance) {\r\n            // console.log(`CoinList: ${props.coinBalance} ${JSON.stringify(props.coinBalance)}`);\r\n            return props.coinBalance.map( value => \r\n                <Coin key={value.key} id={value.key}\r\n                    showBalance={props.showBalance}\r\n                    coinTicker={props.coinTicker}\r\n                    handleAction={props.handleAction} \r\n                    {...value} />\r\n            )\r\n        }\r\n    }\r\n    return (\r\n        <div>\r\n            <table className=\"table table-primary table-borders\">\r\n            <thead>\r\n                <tr>\r\n                <th>Name</th>\r\n                <th>Ticker</th>\r\n                <th>Shares</th>\r\n                <th>Price</th>\r\n                <th>Cost Basis</th>\r\n                <th>Balance</th>\r\n                <th>Actions</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {coinBalances()}\r\n            </tbody>\r\n            </table>\r\n        </div>\r\n    )\r\n}\r\n","import React, { Component } from 'react'\r\n// import logo from './money.gif'\r\nimport './ExchangeHeader.css';\r\n\r\nexport default class ExchangeHeader extends Component {\r\n    render() {\r\n        return (\r\n            <header className=\"App-header\">\r\n                {/* <img src={logo} alt=\"App logo\" className=\"App-logo\" /> */}\r\n                <h1 className=\"App-title\">\r\n                    Paper Coin Exchange\r\n                </h1>\r\n            </header>\r\n          )\r\n    }\r\n}\r\n","import React from 'react'\r\nimport { Modal, Button, Table } from 'react-bootstrap';\r\nimport CurrencyInput from 'react-currency-input-field';\r\nimport { ActionType } from '../ActionType';\r\nimport { getPriceFromTicker } from '../../functions/CoinTicker'\r\n\r\nexport default function BuyDialog(props) {\r\n    const changeCoin = props.coinBalance ? props.coinBalance.find(coin => coin.ticker === props.dialogTicker) : undefined;\r\n    const onBuy = (button) => {\r\n        props.handleAction(ActionType.BuyShares, { key: changeCoin.key, shares: props.quantity})\r\n        // console.log('buy: ', quantity);\r\n        props.handleClose();\r\n    }\r\n\r\n    const ticker = props.dialogTicker ?? \"\";\r\n    const price = getPriceFromTicker(props.coinTicker, ticker);\r\n    const divClass = (props.modalTextFieldStatus ? \"form-group has-success\" : \"form-group has-danger\");\r\n    const inputClass = (props.modalTextFieldStatus ? \"form-control is-valid\" : \"form-control is-invalid\");\r\n    const feedbackClass = (props.modalTextFieldStatus ? \"valid-feedback\" : \"invalid-feedback\");\r\n\r\n    const onAll = () => {\r\n        props.onValidator({quantity: props.cashSharesAvailable, coin: changeCoin});\r\n    }\r\n    \r\n    const handleCancel = () => {\r\n        props.handleClose();\r\n    }\r\n    \r\n    const callValidator = (quantity, coin) => {\r\n        props.onValidator({quantity: quantity, coin: coin});\r\n    }\r\n    const onValidator = (value) => {\r\n        callValidator(value, changeCoin);\r\n    }\r\n    return (\r\n        <Modal\r\n            show={props.show}\r\n            onHide={props.handleClose}\r\n            backdrop=\"static\"\r\n            keyboard={false}\r\n        >\r\n            <Modal.Header>\r\n                <Modal.Title>{props.modalTitle}</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n            <Table className=\"table table-primary table-borders\">\r\n                <tbody>\r\n                    <tr>\r\n                        <th>Coin</th>\r\n                        <td>{ticker}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <th>Price</th>\r\n                        <td>{price}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <th>{props.availability}</th>\r\n                        <td>{props.cashSharesAvailable}</td>\r\n                    </tr>\r\n                </tbody>\r\n            </Table>\r\n            <div className=\"flex-filter\">\r\n                {props.inputTitle}\r\n                <div>\r\n                    <Button variant=\"danger\" size=\"sm\"\r\n                        onClick={onAll}>\r\n                        All\r\n                    </Button>\r\n                </div>\r\n            </div>\r\n            <div className={divClass}>\r\n                <CurrencyInput\r\n                    className={inputClass} \r\n                    id=\"text-input\" \r\n                    name=\"input-name\"\r\n                    placeholder=\"Please enter a dollar amount\"\r\n                    decimalsLimit={18}\r\n                    allowNegativeValue=\"false\"\r\n                    value={props.quantity}\r\n                    defaultValue={props.initialValue}\r\n                    prefix={props.prefix}\r\n                    intlConfig={{ locale: 'en-US', currency: 'USD' }}\r\n                    onValueChange={(changedText) => onValidator(changedText)}\r\n                />\r\n                <div className={feedbackClass}>{props.modalStatusMessage}</div>\r\n            </div>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <Button variant=\"secondary\" \r\n                    onClick={handleCancel}>\r\n                    Cancel\r\n                </Button>\r\n                <Button disabled={!props.modalTextFieldStatus} \r\n                    onClick={onBuy} \r\n                    variant=\"primary\">\r\n                    {props.actionTitle}\r\n                </Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    );\r\n}\r\n","import React from 'react'\r\nimport { Modal, Button, Table } from 'react-bootstrap';\r\nimport CurrencyInput from 'react-currency-input-field';\r\nimport { ActionType } from '../ActionType';\r\nimport './BuyNewDialog.css';\r\nimport { formatPrice } from '../../functions/formatPrice'\r\nimport { getPriceFromTicker } from '../../functions/CoinTicker'\r\n\r\nexport default function BuyNewDialog(props) {\r\n    const changeCoin = props.coinTicker ? props.coinTicker.find(coin => coin.ticker === props.dialogTicker) : undefined;\r\n    const onBuy = (buttonAction) => {\r\n        props.handleAction(ActionType.BuyShares, { key: changeCoin.key, shares: props.quantity})\r\n        props.handleClose();\r\n    }\r\n    const onFilterList = (text) => {\r\n        setFilter(text);\r\n        var mapData = props.coinTicker.map (coin => {\r\n            if (matchesFilter(coin, text)) {\r\n                return coin;\r\n            }\r\n            return null;\r\n        });\r\n        mapData = mapData.filter(Boolean);\r\n        // if the filter erases the selection, pick one of the remaining coins\r\n        const foundList = mapData.find((coin) => coin && props.dialogTicker === coin.ticker);\r\n        if (!foundList && mapData.length > 0) {\r\n            selectCoin(mapData[0].ticker);\r\n        }\r\n    }\r\n\r\n    const onAll = () => {\r\n        props.onValidator({quantity: props.cashSharesAvailable, coin: changeCoin});\r\n    }\r\n    \r\n    const handleCancel = () => {\r\n        props.handleClose();\r\n    }\r\n    const callValidator = (quantity, coin) => {\r\n        props.onValidator({quantity: quantity, coin: coin});\r\n    }\r\n    const onValidator = (value) => {\r\n        callValidator(value, changeCoin);\r\n    }\r\n    const onSelectCoin = (control) => {\r\n        selectCoin(control.target.value);\r\n    }\r\n    const selectCoin = (ticker) => {\r\n        const currentCoin = props.selectCoin(ticker);\r\n        callValidator(props.quantity, currentCoin);\r\n    }\r\n    const matchesFilter = (coin, filter) => {\r\n        return filter.length === 0 ||\r\n            coin.key.toLowerCase().includes(filter.toLowerCase()) ||\r\n            coin.name.toLowerCase().includes(filter.toLowerCase()) ||\r\n            coin.ticker.toLowerCase().includes(filter.toLowerCase());\r\n    }\r\n    const filterCoins = (text) => {\r\n        if (props.coinTicker !== undefined && props.show === true) {\r\n            const mapData = props.coinTicker.map (coin => {\r\n                if (matchesFilter(coin, text)) {\r\n                    // console.log(`<option key=${coin.ticker} value=${coin.ticker} >${coin.ticker}</option>`)\r\n                    return <option key={coin.ticker} value={coin.ticker}  >{coin.ticker}</option>\r\n                }\r\n                return null;\r\n            });\r\n            // console.log(`<option key=\"null\" value=\"\" />`);\r\n            mapData.unshift(<option key=\"null\" value=\"\" />);\r\n            return mapData;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    const price = changeCoin ? formatPrice(getPriceFromTicker(props.coinTicker, changeCoin.ticker)) : \"\";\r\n    const divClass = (props.modalTextFieldStatus ? \"form-group has-success\" : \"form-group has-danger\");\r\n    const inputClass = (props.modalTextFieldStatus ? \"form-control is-valid\" : \"form-control is-invalid\");\r\n    const feedbackClass = (props.modalTextFieldStatus ? \"valid-feedback\" : \"invalid-feedback\");\r\n    const [filter, setFilter] = React.useState(\"\");\r\n    const currencyInputEnabled = changeCoin ? true : false;\r\n    return (\r\n        <Modal\r\n            show={props.show}\r\n            onHide={props.handleClose}\r\n            backdrop=\"static\"\r\n            keyboard={false}\r\n        >\r\n            <Modal.Header>\r\n                <Modal.Title>{props.modalTitle}</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <div className=\"flex-filter\" id=\"filter-div\">\r\n                    <label htmlFor=\"filter-select\" className=\"form-label mt-4\">Select ticker</label>\r\n                    <div>\r\n                        <input type=\"text\"\r\n                            className=\"form-control\"\r\n                            id=\"filter-coins\" \r\n                            name=\"filter-coins\"\r\n                            placeholder=\"Filter list by ticker name\"\r\n                            onChange={(event) => onFilterList(event.target.value)}\r\n                        />\r\n                    </div>\r\n                </div>\r\n                <select className=\"form-select\" \r\n                    id=\"filter-select\" \r\n                    onChange={onSelectCoin}\r\n                    value={props.dialogTicker}\r\n                    placeholder=\"Select ticker name...\">\r\n                    {filterCoins(filter)}\r\n                </select>\r\n                <br/>\r\n                <Table className=\"table table-primary table-borders\">\r\n                    <tbody>\r\n                        <tr>\r\n                            <th>Coin</th>\r\n                            <td>{props.dialogTicker}</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <th>Price</th>\r\n                            <td>{price}</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <th>{props.availability}</th>\r\n                            <td>{props.cashSharesAvailable}</td>\r\n                        </tr>\r\n                    </tbody>\r\n                </Table>\r\n                <div className=\"flex-filter\">\r\n                {props.inputTitle}\r\n                <div>\r\n                    <Button variant=\"danger\" size=\"sm\"\r\n                        onClick={onAll}>\r\n                        All\r\n                    </Button>\r\n                </div>\r\n            </div>\r\n                <div className={divClass}>\r\n                    <CurrencyInput\r\n                        className={inputClass} \r\n                        id=\"text-input\" \r\n                        name=\"input-name\"\r\n                        placeholder=\"Please enter a dollar amount\"\r\n                        decimalsLimit={18}\r\n                        allowNegativeValue=\"false\"\r\n                        value={props.quantity}\r\n                        defaultValue={props.initialValue}\r\n                        disabled={!currencyInputEnabled}\r\n                        prefix={props.prefix}\r\n                        intlConfig={{ locale: 'en-US', currency: 'USD' }}\r\n                        onValueChange={(changedText) => onValidator(changedText)}\r\n                    />\r\n                    <div className={feedbackClass}>{props.modalStatusMessage}</div>\r\n                </div>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <Button variant=\"secondary\" \r\n                    onClick={handleCancel}>\r\n                    Cancel\r\n                </Button>\r\n                <Button disabled={!props.modalTextFieldStatus} \r\n                    onClick={onBuy} \r\n                    variant=\"primary\">\r\n                    {props.actionTitle}\r\n                </Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    );\r\n}\r\n\r\n","import React from 'react'\r\nimport { Modal, Button, Table } from 'react-bootstrap';\r\nimport { ActionType } from '../ActionType';\r\nimport { getPriceFromTicker } from '../../functions/CoinTicker'\r\n\r\nexport default function SellDialog(props) {\r\n    const changeCoin = props.coinBalance ? props.coinBalance.find(coin => coin.ticker === props.dialogTicker) : undefined;\r\n    const onSell = (event) => {\r\n        props.handleAction(ActionType.SellShares, { key: changeCoin.key, shares: props.quantity});\r\n        props.handleClose();\r\n    }\r\n\r\n    const ticker = changeCoin ? changeCoin.ticker : \"\";\r\n    const price = getPriceFromTicker(props.coinTicker, ticker);\r\n    const divClass = (props.modalTextFieldStatus ? \"form-group has-success\" : \"form-group has-danger\");\r\n    const inputClass = (props.modalTextFieldStatus ? \"form-control is-valid\" : \"form-control is-invalid\");\r\n    const feedbackClass = (props.modalTextFieldStatus ? \"valid-feedback\" : \"invalid-feedback\");\r\n\r\n    const handleCancel = () => {\r\n        props.handleClose();\r\n    }\r\n    \r\n    const onAll = () => {\r\n        props.onValidator(props.cashSharesAvailable);\r\n    }\r\n    \r\n    return (\r\n        <Modal\r\n            show={props.show}\r\n            onHide={props.handleClose}\r\n            backdrop=\"static\"\r\n            keyboard={false}\r\n        >\r\n            <Modal.Header>\r\n                <Modal.Title>{props.modalTitle}</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n            <Table className=\"table table-primary table-borders\">\r\n                <tbody>\r\n                    <tr>\r\n                        <th>Coin</th>\r\n                        <td>{props.dialogTicker}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <th>Price</th>\r\n                        <td>{price}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <th>{props.availability}</th>\r\n                        <td>{props.cashSharesAvailable}</td>\r\n                    </tr>\r\n                </tbody>\r\n            </Table>\r\n            <div className=\"flex-filter\">\r\n                {props.inputTitle}\r\n                <div>\r\n                    <Button variant=\"danger\" size=\"sm\"\r\n                        onClick={onAll}>\r\n                        All\r\n                    </Button>\r\n                </div>\r\n            </div>\r\n            <div className={divClass}>\r\n                <input type=\"text\"\r\n                    className={inputClass} \r\n                    id=\"text-input\" \r\n                    value={props.quantity}\r\n                    name=\"input-name\"\r\n                    placeholder=\"Please enter number of shares to sell\"\r\n                    onChange={(event) => props.onValidator(event.target.value)}\r\n                />\r\n                <div className={feedbackClass}>{props.modalStatusMessage}</div>\r\n            </div>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <Button variant=\"secondary\" \r\n                    onClick={handleCancel}>\r\n                    Cancel\r\n                </Button>\r\n                <Button disabled={!props.modalTextFieldStatus} \r\n                    onClick={onSell} \r\n                    variant=\"primary\">\r\n                    {props.actionTitle}\r\n                </Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    );\r\n}\r\n","import React from 'react'\r\nimport { Modal, Button, Table } from 'react-bootstrap';\r\n\r\nexport default function LoadingDialog(props) {\r\n    const loadingMessage = (status) => {\r\n        return status ? \"Completed\" : \"Loading...\";\r\n    }\r\n    const balancesStatus = () => {\r\n        const status = Boolean(props.coinBalance);\r\n        return <div>\r\n            {loadingMessage(status)}\r\n        </div>\r\n    }\r\n    const settingsStatus = () => {\r\n        const status = props.settings.feeRate !== undefined;\r\n        return <div>\r\n            {loadingMessage(status)}\r\n        </div>\r\n    }\r\n    const tickersStatus = () => {\r\n        const status = Boolean(props.coinTicker);\r\n        return <div>\r\n            {loadingMessage(status)}\r\n        </div>\r\n    }\r\n    const [seconds, setSeconds] = React.useState(0);\r\n    const [reloadSeconds, setReloadSeconds] = React.useState(5);\r\n    const handleReload = () => {\r\n        props.handleReload();\r\n        setReloadSeconds(seconds + 5);\r\n    }\r\n    const enableReloadButton = seconds >= reloadSeconds;\r\n    React.useEffect(() => {\r\n        if (props.show) {\r\n            const interval = setInterval(() => {\r\n            setSeconds(seconds => seconds + 1);\r\n            if (Boolean(props.coinBalance) &&\r\n                Boolean(props.coinTicker) &&\r\n                props.settings.feeRate !== undefined) {\r\n                props.handleClose();\r\n                setSeconds(0);\r\n            }}, 1000);\r\n            return () => clearInterval(interval);\r\n        }\r\n    }, [props]);\r\n    return (\r\n        <Modal\r\n            show={props.show}\r\n            onHide={props.handleClose}\r\n        >\r\n            <Modal.Header>\r\n                <Modal.Title>{props.modalTitle}</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <Table className=\"table table-primary table-borders\">\r\n                    <tbody>\r\n                        <tr>\r\n                            <th>Balances</th>\r\n                            <td>\r\n                                <div>\r\n                                    {balancesStatus()}\r\n                                </div>\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <th>Tickers</th>\r\n                            <td>\r\n                                <div>\r\n                                    {tickersStatus()}\r\n                                </div>\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <th>Settings</th>\r\n                            <td>\r\n                                <div>\r\n                                    {settingsStatus()}\r\n                                </div>\r\n                            </td>\r\n                        </tr>\r\n                    </tbody>\r\n                </Table>\r\n                <p>{seconds} seconds have elapsed.</p>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <Button variant=\"primary\" \r\n                    disabled={!enableReloadButton}\r\n                    onClick={handleReload}>\r\n                    Attempt to reload\r\n                </Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    );\r\n}\r\n","import React from 'react'\r\nimport { Modal, Button, Table } from 'react-bootstrap';\r\nimport { ActionType } from '../ActionType';\r\n\r\nexport default function SettingsDialog(props) {\r\n\r\n    const handleCancel = () => {\r\n        props.handleClose();\r\n    }\r\n    \r\n    const onSave = () => {\r\n        props.handleClose();\r\n        props.handleAction(ActionType.SaveSettings, { feeRate: props.settings.feeRate });\r\n    }\r\n    \r\n    return (\r\n        <Modal\r\n            show={props.show}\r\n            onHide={props.handleClose}\r\n            backdrop=\"static\"\r\n            keyboard={false}\r\n        >\r\n            <Modal.Header>\r\n                <Modal.Title>{props.modalTitle}</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n            <Table className=\"table table-primary table-borders\">\r\n                <tbody>\r\n                    <tr>\r\n                        <th>Simulated fees</th>\r\n                        <td>\r\n                            <input type=\"text\"\r\n                                className=\"form-control\" \r\n                                id=\"text-input\" \r\n                                value={props.settings.feeRate}\r\n                                name=\"input-name\"\r\n                                placeholder=\"Enter percentage that should be collected in fees\"\r\n                                onChange={(event) => props.onValidator({feeRate: event.target.value})}/>\r\n                        </td>\r\n                    </tr>\r\n                </tbody>\r\n            </Table>\r\n            <div className=\"flex-filter\">\r\n                {props.inputTitle}\r\n            </div>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <Button variant=\"info\" size=\"sm\"\r\n                    onClick={onSave}>\r\n                    Save\r\n                </Button>\r\n                <Button variant=\"info\" size=\"sm\"\r\n                    onClick={handleCancel}>\r\n                    Cancel\r\n                </Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    );\r\n}\r\n","export const nobodyLooking = 'Nobody is looking over your shoulder, show your balances';\r\nexport const pryingEyes = 'Hide balances from prying eyes';","import React from 'react'\r\nimport styled from 'styled-components';\r\nimport ButtonToolbar from 'react-bootstrap/ButtonToolbar';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport { ActionType } from '../ActionType';\r\nimport PopupButton from '../PopupButton';\r\nimport PopupDiv from '../PopupDiv';\r\nimport { formatPrice } from '../../functions/formatPrice';\r\nimport { profitMessage } from '../../functions/ProfitMessage';\r\nimport { nobodyLooking, pryingEyes } from '../../functions/StringTable';\r\n\r\nconst Td = styled.td`\r\n    border: 2px solid #cccccc;\r\n    width: 25vh;\r\n`;\r\n\r\nexport default function OverviewPanel(props) {\r\n    const handleShowHideBalance = (event) => {\r\n        event.preventDefault();\r\n        props.handleAction(ActionType.ToggleBalance, !props.showBalance);\r\n    }\r\n\r\n    const handleSettings = (event) => {\r\n        event.preventDefault();\r\n        props.handleAction(ActionType.Settings);\r\n    }\r\n\r\n    const handleClickBuyNew = (event) => {\r\n        event.preventDefault();\r\n        // popup a modal to let the user decide what coin & how much\r\n        props.handleAction(ActionType.BuyNew);\r\n    }\r\n\r\n    const handleClickDeposit = (event) => {\r\n        event.preventDefault();\r\n        // popup a modal to let the user decide how much\r\n        props.handleAction(ActionType.Deposit, 1000);\r\n    }\r\n\r\n    const handleClickWithdraw = (event) => {\r\n        event.preventDefault();\r\n        // popup a modal to let the user decide how much\r\n        props.handleAction(ActionType.Withdraw, 1000);\r\n    }\r\n\r\n    const handleClickHelp = (event) => {\r\n        event.preventDefault();\r\n        // popup a modal to let the user decide how much\r\n        props.handleAction(ActionType.Help);\r\n    }\r\n\r\n    const handleReset = (event) => {\r\n        event.preventDefault();\r\n        props.handleAction(ActionType.Reset);\r\n    }\r\n\r\n\r\n    const profit = props.netBalance - props.totalDeposits;\r\n    const profitLossClass = profit >= 0 ? \"price-profit\" : \"price-loss\"\r\n    const arrowCharacter = profit >= 0 ? \"▲\" : \"▼\";\r\n\r\n    const netBalance = `${props.showBalance ? \"$\" + formatPrice(props.netBalance, 2) : arrowCharacter}`;\r\n    const totalDeposits = `${props.showBalance ? \"$\" + formatPrice(props.totalDeposits, 2) : \"-\"}`;\r\n    const feeRate = `${props.feeRate*100}%`;\r\n    const feesCollected = `${props.showBalance ? \"$\" + formatPrice(props.feesCollected, 2) : \"-\"}`;\r\n    \r\n    const showHideBalanceText = props.showBalance ? 'Hide Balance' : 'Show Balance';\r\n    const showHideBalancePopup = props.showBalance ? pryingEyes : nobodyLooking;\r\n    const showHideBalanceVariant = (props.showBalance ? 'warning' : 'info');\r\n    const cashAvailable = `${props.showBalance ? \"$\" + formatPrice(props.cashAvailable, 2) : \"-\"}`;\r\n    const withdrawEnabled = props.cashAvailable >= 1000;\r\n    const withdrawPopupText = withdrawEnabled ? \"Withdraw $1000\" : \"Insufficient funds available to withdraw $1000\";\r\n    const netBalancePopupMessage = profitMessage(props.showBalance, profit);\r\n\r\n    return (\r\n        <div>\r\n            <table  className=\"table table-primary table-borders\">\r\n                <thead>\r\n                    <tr>\r\n                        <th>Total Deposits</th>\r\n                        <th>Net Balance</th>\r\n                        <th>Cash Available</th>\r\n                        <th>Fee Rate</th>\r\n                        <th>Fees collected</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    <tr>\r\n                        <Td>{totalDeposits}</Td>\r\n                        <Td>\r\n                            <div className={profitLossClass}>\r\n                                <PopupDiv\r\n                                    popup={netBalancePopupMessage}\r\n                                    text={netBalance}\r\n                                    disabled={false} />\r\n                            </div>\r\n                        </Td>\r\n                        <Td>{cashAvailable}</Td>\r\n                        <Td>{feeRate}</Td>\r\n                        <Td>{feesCollected}</Td>\r\n                    </tr>\r\n                </tbody>\r\n            </table>\r\n            <div className=\"button-toolbar-actions\" >\r\n                <ButtonToolbar aria-label=\"Toolbar with button groups\">\r\n                <ButtonGroup className=\"me-2\" aria-label=\"Show-Hide group\">\r\n                    <PopupButton\r\n                        disabled={false} \r\n                        variant={showHideBalanceVariant}\r\n                        popup={showHideBalancePopup}\r\n                        text={showHideBalanceText}\r\n                        onClick={handleShowHideBalance} />\r\n                </ButtonGroup>\r\n                <ButtonGroup className=\"me-2\" aria-label=\"Reset group\">\r\n                    <PopupButton\r\n                        disabled={false} \r\n                        variant=\"danger\"\r\n                        popup=\"Reset all deposits and purchases\"\r\n                        text=\"Reset\"\r\n                        onClick={handleReset} />\r\n                </ButtonGroup>\r\n                <ButtonGroup className=\"me-2\" aria-label=\"Preferences group\">\r\n                    <PopupButton\r\n                        disabled={false} \r\n                        variant=\"secondary\"\r\n                        popup=\"Adjust application preferences\"\r\n                        text=\"Settings\"\r\n                        onClick={handleSettings} />\r\n                </ButtonGroup>\r\n                <ButtonGroup className=\"me-2\" aria-label=\"Deposit-Withdraw group\">\r\n                    <PopupButton\r\n                        disabled={false} \r\n                        variant=\"success\"\r\n                        popup=\"Deposit $1000\"\r\n                        text=\"Deposit\"\r\n                        onClick={handleClickDeposit} />\r\n                    <PopupButton\r\n                        disabled={!withdrawEnabled} \r\n                        variant=\"danger\"\r\n                        popup={withdrawPopupText}\r\n                        text=\"Withdraw\"\r\n                        onClick={handleClickWithdraw} />\r\n                </ButtonGroup>\r\n                <ButtonGroup className=\"me-2\" aria-label=\"Buy group\">\r\n                    <PopupButton\r\n                        disabled={false} \r\n                        variant=\"success\"\r\n                        popup=\"Purchase coins\"\r\n                        text=\"Buy\"\r\n                        onClick={handleClickBuyNew} />\r\n                </ButtonGroup>\r\n                <ButtonGroup className=\"me-2\" aria-label=\"Help group\">\r\n                    <PopupButton\r\n                        disabled={false} \r\n                        variant=\"info\"\r\n                        popup=\"Get help for using this application\"\r\n                        text=\"Help\"\r\n                        onClick={handleClickHelp} />\r\n                </ButtonGroup>\r\n                </ButtonToolbar>\r\n            </div>\r\n        </div>\r\n    );\r\n}","import React from 'react'\r\nimport { Modal, Button } from 'react-bootstrap';\r\n\r\nexport default function AlertDialog(props) {\r\n    const isAcceptanceButtonPresent = () => {\r\n        return props.alertAcceptHandler !== undefined &&\r\n            props.alertAcceptHandler.handler !== undefined &&\r\n            props.alertButtonAcceptText && props.alertButtonAcceptText.length > 0;\r\n    }\r\n    const getCancelButtonText = () => {\r\n        return isAcceptanceButtonPresent() ? \"Cancel\" : \"Close\";\r\n    }\r\n    const getAlertAcceptButton = () => {\r\n        if (isAcceptanceButtonPresent()) {\r\n          return <Button onClick={() => {\r\n              props.handleClose();\r\n              props.alertAcceptHandler.handler();\r\n            }} variant=\"outline-danger\">\r\n            {props.alertButtonAcceptText}\r\n            </Button>\r\n        }\r\n        return <></>;\r\n      }\r\n    \r\n      return (\r\n        <Modal\r\n            show={props.show}\r\n            onHide={props.handleClose}\r\n            backdrop=\"static\"\r\n            keyboard={false}\r\n        >\r\n            <Modal.Header>\r\n                <Modal.Title>{props.alertHeading}</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                {props.alertMessage}\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                {getAlertAcceptButton()}\r\n                <Button onClick={() => {\r\n                    props.handleClose();\r\n                    props.alertCancelHandler.handler();\r\n                    }} variant=\"outline-success\">\r\n                    {getCancelButtonText()}\r\n                </Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    );\r\n}","import React from 'react'\r\nimport { Modal, Button } from 'react-bootstrap';\r\nimport { ActionType } from '../ActionType';\r\nimport PopupButton from '../PopupButton';\r\nimport PopupDiv from '../PopupDiv';\r\nimport { formatPrice } from '../../functions/formatPrice';\r\nimport Tab from 'react-bootstrap/Tabs';\r\nimport Tabs from 'react-bootstrap/Tabs';\r\nimport { profitMessage } from '../../functions/ProfitMessage';\r\nimport { nobodyLooking, pryingEyes } from '../../functions/StringTable';\r\n\r\nexport default function HelpDialog(props) {\r\n    const [key, setKey] = React.useState(0);\r\n    const tabsList = [\"deposit\", \"showBalance\", \"buy\"];\r\n\r\n    const handleShowHideBalance = (event) => {\r\n        event.preventDefault();\r\n        props.handleAction(ActionType.ToggleBalance, !props.showBalance);\r\n    }\r\n\r\n    const handleClickDeposit = (event) => {\r\n        event.preventDefault();\r\n        // popup a modal to let the user decide how much\r\n        props.handleAction(ActionType.Deposit, 1000);\r\n    }\r\n\r\n    const handlePrevious = (event) => {\r\n        event.preventDefault();\r\n        setKey((key + tabsList.length - 1) % tabsList.length);\r\n    }\r\n\r\n    const handleNext = (event) => {\r\n        event.preventDefault();\r\n        setKey((key + 1) % tabsList.length);\r\n    }\r\n\r\n    const handleClickBuy = (event) => {\r\n        event.preventDefault();\r\n        props.handleAction(ActionType.BuyNew);\r\n        props.handleClose();\r\n    }\r\n\r\n    const profit = props.netBalance - props.totalDeposits;\r\n    const profitLossClass = profit >= 0 ? \"price-profit\" : \"price-loss\"\r\n    const arrowCharacter = profit >= 0 ? \"▲\" : \"▼\";\r\n    const netBalancePopupMessage = profitMessage(props.showBalance, profit);\r\n    const netBalance = `${props.showBalance ? \"$\" + formatPrice(props.netBalance, 2) : arrowCharacter}`;\r\n    const showHideBalanceDescription = props.showBalance ? 'hide' : 'show';\r\n    const showHideBalanceText = props.showBalance ? 'Hide Balance' : 'Show Balance';\r\n    const showHideBalancePopup = props.showBalance ? pryingEyes : nobodyLooking;\r\n    const showHideBalanceVariant = (props.showBalance ? 'warning' : 'info');\r\n    const netBalanceDescription = (props.showBalance ? 'Net Balance is displayed for anyone to see' : 'Net Balance displays as an arrow to hide the amount');\r\n    return (\r\n        <Modal\r\n            show={props.show}\r\n            onHide={props.handleClose}\r\n        >\r\n            <Modal.Header>\r\n                <Modal.Title>Help using Paper Coin Exchange</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <Tabs onSelect={(k) => setKey(k)} activeKey={tabsList[key]} id=\"help-tabs\" className=\"mb-3\">\r\n                    <Tab eventKey=\"deposit\" title=\"Deposit\">\r\n                        <div className=\"wrap-content\" >\r\n                            <div>Click the deposit button to deposit $1000 into your account</div>\r\n                            <div className=\"right-left-margin\">\r\n                                <PopupButton\r\n                                    disabled={false} \r\n                                    variant=\"success\"\r\n                                    popup=\"Deposit $1000\"\r\n                                    text=\"Deposit\"\r\n                                    onClick={handleClickDeposit} />\r\n                            </div>\r\n                            Deposits: {formatPrice(props.totalDeposits, 2)}\r\n                        </div>\r\n                    </Tab>\r\n                    <Tab eventKey=\"showBalance\" title=\"Balance\">\r\n                        <div className=\"wrap-content\" >\r\n                            <div>Click the {showHideBalanceText} button to {showHideBalanceDescription} your balances</div>\r\n                            <div className=\"right-left-margin\">\r\n                                <PopupButton\r\n                                    disabled={false} \r\n                                    variant={showHideBalanceVariant}\r\n                                    popup={showHideBalancePopup}\r\n                                    text={showHideBalanceText}\r\n                                    onClick={handleShowHideBalance} />\r\n                            </div>\r\n                            <div className=\"right-margin\">{netBalanceDescription}</div>\r\n                            <div className={profitLossClass}>\r\n                                <PopupDiv\r\n                                    popup={netBalancePopupMessage}\r\n                                    text={netBalance}\r\n                                    disabled={false} />\r\n                            </div>\r\n                        </div>\r\n                    </Tab>\r\n                    <Tab eventKey=\"buy\" title=\"Buy\">\r\n                        <div className=\"wrap-content\" >\r\n                            <div>Click the Buy button to display a list of coins available to purchase and enter how much to buy.  When you click the Buy button, the help window will close</div>\r\n                            <div className=\"right-left-margin\">\r\n                                <PopupButton\r\n                                    disabled={false} \r\n                                    variant=\"success\"\r\n                                    popup=\"Purchase coins\"\r\n                                    text=\"Buy\"\r\n                                    onClick={handleClickBuy} />\r\n                            </div>\r\n                        </div>\r\n                    </Tab>\r\n                </Tabs>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <Button variant=\"secondary\" \r\n                    disabled={false}\r\n                    onClick={handlePrevious}>\r\n                    Previous\r\n                </Button>\r\n                <Button variant=\"secondary\" \r\n                    disabled={false}\r\n                    onClick={handleNext}>\r\n                    Next\r\n                </Button>\r\n                <Button variant=\"primary\" \r\n                    disabled={false}\r\n                    onClick={props.handleClose}>\r\n                    Close\r\n                </Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    );\r\n}\r\n","const LoadingState = {\r\n    Initial: \"Initial\",\r\n    Displayed: \"Displayed\",\r\n    Completed: \"Completed\",\r\n}\r\n\r\nexport { LoadingState };\r\n","export const createCoinBalance = (coin) => {\r\n    return {\r\n        key: coin.key,\r\n        name: coin.name,\r\n        ticker: coin.ticker,\r\n        shares: 0,\r\n        costBasis: 0,\r\n    }\r\n}\r\n\r\nconst coinBalanceFilename = 'PaperCoinBalance';\r\n\r\nexport const resetCoinBalance = () => {\r\n  localStorage.removeItem(coinBalanceFilename);\r\n}\r\n\r\nexport const saveCoinBalance = (values) => {\r\n  const balances = values.balance.filter(coin => coin && !isNaN(coin.shares) && coin.shares > 0);\r\n  const balanceJson = JSON.stringify({ balance: balances, totalDeposits: values.totalDeposits, cash: values.cash, feesPaid: values.feesPaid });\r\n  localStorage.setItem(coinBalanceFilename, balanceJson);\r\n  console.log(`balances: ${balanceJson}`);\r\n}\r\n\r\nexport const readCoinBalance = (setters) => {\r\n  setters.balance(null);\r\n  const jsonValues = localStorage.getItem(coinBalanceFilename);\r\n  const parsedValues = JSON.parse(jsonValues);\r\n  console.log(`readCoinBalance: jsonValues: ${jsonValues}`)\r\n\r\n  var balances = [];\r\n  var cash = 0;\r\n  var feesPaid = 0;\r\n  var totalDeposits = 0;\r\n\r\n  if (parsedValues !== null) {\r\n    balances = parsedValues.balance ?? [];\r\n    cash = parsedValues.cash ?? 0;\r\n    feesPaid = parsedValues.feesPaid ?? 0;\r\n    totalDeposits = parsedValues.totalDeposits ?? 0;\r\n  }\r\n  balances = balances.map(coin => {\r\n    // add newly added members\r\n    if (isNaN(coin.costBasis))\r\n      coin.costBasis = 0;\r\n    return coin;\r\n  });\r\n\r\n  // trim records that have NaN as the number of shares\r\n  const noNan = balances.filter(coin => coin && !isNaN(coin.shares));\r\n  setters.balance(noNan);\r\n  setters.cash(cash);\r\n  setters.feesPaid(feesPaid);\r\n  setters.totalDeposits(totalDeposits);\r\n}\r\n\r\n","const settingsFilename = 'PaperSettings';\r\n\r\nexport const resetSettings = () => {\r\n  localStorage.removeItem(settingsFilename);\r\n}\r\n\r\nexport const saveSettings = (values) => {\r\n  const settingsJson = JSON.stringify({ feeRate: values.feeRate });\r\n  localStorage.setItem(settingsFilename, settingsJson);\r\n  console.log(`settings: ${settingsJson}`);\r\n}\r\n\r\n// { feeRate: feeRate }\r\nexport const readSettings = (setters) => {\r\n  const jsonValues = localStorage.getItem(settingsFilename);\r\n  const parsedValues = JSON.parse(jsonValues);\r\n  console.log(`readSettings: jsonValues: ${jsonValues}`)\r\n\r\n  var feeRate = 0;\r\n\r\n  if (parsedValues !== null) {\r\n    feeRate = parsedValues.feeRate ?? 0;\r\n  }\r\n\r\n  // trim records that have NaN as the number of shares\r\n  setters.feeRate(feeRate);\r\n}\r\n\r\n","// NavBar example: https://stackoverflow.com/questions/51486024/bootstrap-navbar-with-react\r\n\r\nimport './App.css';\r\nimport CoinList from './components/CoinList/CoinList';\r\nimport ExchangeHeader from './components/ExchangeHeader/ExchangeHeader';\r\nimport BuyDialog from './components/BuyDialog/BuyDialog';\r\nimport BuyNewDialog from './components/BuyNewDialog/BuyNewDialog';\r\nimport SellDialog from './components/SellDialog/SellDialog';\r\nimport LoadingDialog from './components/LoadingDialog/LoadingDialog';\r\nimport SettingsDialog from './components/SettingsDialog/SettingsDialog';\r\nimport OverviewPanel from './components/OverviewPanel/OverviewPanel';\r\nimport AlertDialog from './components/AlertDialog/AlertDialog';\r\nimport HelpDialog from './components/HelpDialog/HelpDialog';\r\n\r\nimport 'bootswatch/dist/flatly/bootstrap.min.css';\r\nimport React from 'react';\r\nimport { ActionType } from './components/ActionType';\r\nimport { LoadingState } from './components/LoadingState';\r\nimport { createCoinBalance, saveCoinBalance, readCoinBalance, resetCoinBalance } from './functions/CoinBalance';\r\nimport { saveSettings, readSettings, resetSettings } from './functions/Settings';\r\nimport { getPriceFromTicker, getCoinTicker, resetCoinTicker } from './functions/CoinTicker'\r\n\r\nfunction App(props) {\r\n  const[totalDeposits, setTotalDeposits] = React.useState(0);\r\n  const[netBalance, setNetBalance] = React.useState(0);\r\n  const[cashAvailable, setCashAvailable] = React.useState(undefined);\r\n  const[feeRate, setFeeRate] = React.useState(undefined);\r\n  const[feeTotal, setFeeTotal] = React.useState(undefined);\r\n  const[showBalance, setShowBalance] = React.useState(false);\r\n  const[coinBalance, setCoinBalance] = React.useState(undefined);  // balances of each coin purchased\r\n  const[isHelpDialogOpen, setHelpDialogOpen] = React.useState(false);\r\n  const[isLoadingDialogOpen, setLoadingDialogOpen] = React.useState(LoadingState.Initial);\r\n  const[isBuyDialogOpen, setBuyDialogOpen] = React.useState(false);\r\n  const[isSellDialogOpen, setSellDialogOpen] = React.useState(false);\r\n  const[isBuyNewDialogOpen, setBuyNewDialogOpen] = React.useState(false);\r\n  const[isSettingsDialogOpen, setSettingsDialogOpen] = React.useState(false);\r\n  const[dialogTicker, setDialogTicker] = React.useState(\"\");  // ticker the dialogs operate on\r\n  const[initialValue, setInitialValue] = React.useState(0);\r\n  const[coinTicker, setCoinTicker] = React.useState(undefined);  // list of coins\r\n  const[quantity, setQuantity] = React.useState(0);     // dialogs quantity\r\n  const[statusBarText, setStatusBarText] = React.useState(\"Loading...\");\r\n\r\n  // alert values\r\n  const[showAlert, setShowAlert] = React.useState(false);\r\n  const[alertHeading, setAlertHeading] = React.useState(\"\");\r\n  const[alertMessage, setAlertMessage] = React.useState(\"\");\r\n  const[alertButtonAcceptText, setAlertButtonAcceptText] = React.useState(\"\");\r\n  const[alertAcceptHandler, setAlertAcceptHandler] = React.useState(undefined);\r\n  const[alertCancelHandler, setAlertCancelHandler] = React.useState(undefined);\r\n\r\n  const minutesAsSeconds = (num) => {\r\n    return num * 60;\r\n  }\r\n\r\n  const calculateBalance = (bal = coinBalance, cash = cashAvailable) => {\r\n    if (typeof(coinTicker) == \"object\" &&\r\n      typeof(bal) == \"object\" &&\r\n      cash !== undefined && cash >= 0) {\r\n      var totalAvailable = cash;\r\n      bal.forEach(coin => {\r\n        totalAvailable += coin.shares * getPriceFromTicker(coinTicker, coin.ticker);\r\n      });\r\n      if (totalAvailable !== netBalance)\r\n        setNetBalance(totalAvailable);\r\n    }\r\n    else\r\n      if (0 !== netBalance)\r\n        setNetBalance(0);\r\n  }\r\n\r\n  // 1 second timer used for updating the popup text over the refresh buttons\r\n  const [seconds, setSeconds] = React.useState(0);\r\n  const [lastRefresh, setLastRefresh] = React.useState(0);\r\n  React.useEffect(() => {\r\n    const isRefreshNeeded = () => {\r\n      if (!coinTicker)\r\n        return false;\r\n      const bitCoin = coinTicker.find(coin => coin.ticker === \"BTC\");\r\n      const priceAge = Date.parse(bitCoin.last_updated);\r\n      const lastRefreshSeconds = (Date.now() - lastRefresh) / 1000;\r\n      const priceAgeSeconds = (Date.now() - priceAge) / 1000;\r\n      // console.log(`lastRefreshSeconds: ${lastRefreshSeconds} priceAgeSeconds: ${priceAgeSeconds}`)\r\n      if (lastRefreshSeconds > minutesAsSeconds(1) &&\r\n        priceAgeSeconds > minutesAsSeconds(5)) {\r\n        return true;\r\n      }\r\n      return false;\r\n    }\r\n    const interval = setInterval(() => {\r\n    setSeconds(seconds => seconds + 1);\r\n    if (isRefreshNeeded()) {\r\n      setLastRefresh(Date.now());\r\n      getCoinTicker(setCoinTicker, setStatusBarText, calculateBalance);\r\n    }\r\n  }, 1000);\r\n  return () => clearInterval(interval);\r\n  }, [seconds, coinTicker, setCoinTicker, lastRefresh, setLastRefresh, setStatusBarText, calculateBalance]);\r\n\r\n  const closeHelpDialog = () => {\r\n    setHelpDialogOpen(false);\r\n  }\r\n  const closeAlertDialog = () => {\r\n    setShowAlert(false);\r\n  }\r\n  const closeSettingsDialog = () => {\r\n    setSettingsDialogOpen(false);\r\n  }\r\n  const closeBuyDialog = () => {\r\n    setBuyDialogOpen(false);\r\n  }\r\n  const closeSellDialog = () => {\r\n    setSellDialogOpen(false);\r\n  }\r\n  const closeBuyNewDialog = () => {\r\n    setBuyNewDialogOpen(false);\r\n  }\r\n  const closeLoadingDialog = () => {\r\n    setLoadingDialogOpen(LoadingState.Completed);\r\n    calculateBalance();\r\n  }\r\n\r\n  const onReloadLoadingDialog = () => {\r\n    if (coinBalance === undefined) {\r\n      readCoinBalance({ balance: setCoinBalance, totalDeposits: setTotalDeposits, cash: setCashAvailable, feesPaid: setFeeTotal });\r\n      readSettings({ feeRate: setFeeRate });\r\n    }\r\n  }\r\n\r\n  const reloadApp = () => {\r\n    setCoinTicker(undefined);\r\n    setCoinBalance(undefined);\r\n    setCashAvailable(undefined);\r\n    setFeeRate(undefined);\r\n    componentDidMount(true);\r\n  }\r\n\r\n  const componentDidMount = async (forcedReset = false) => {\r\n    if (isLoadingDialogOpen === LoadingState.Initial || forcedReset) {\r\n      setLoadingDialogOpen(LoadingState.Displayed);\r\n    }\r\n    getCoinTicker(setCoinTicker, setStatusBarText, calculateBalance);\r\n    if (coinBalance === undefined || forcedReset) {\r\n      readCoinBalance({ balance: setCoinBalance, totalDeposits: setTotalDeposits, cash: setCashAvailable, feesPaid: setFeeTotal });\r\n    }\r\n    if (feeRate === undefined || forcedReset) {\r\n      readSettings({ feeRate: setFeeRate });\r\n    }\r\n  }\r\n\r\n  React.useEffect(() => {\r\n    if (coinBalance === undefined) {\r\n      componentDidMount();\r\n    }\r\n  })\r\n\r\n  const toggleBalance = (showBalance) => {\r\n    setShowBalance(showBalance);\r\n    calculateBalance();\r\n  }\r\n\r\n  const handleDeposit = async (value) => {\r\n    const totalAvailable = cashAvailable + value;\r\n    const deposits = totalDeposits + value;\r\n    setCashAvailable(totalAvailable);\r\n    saveCoinBalance({ balance: coinBalance, totalDeposits: deposits, cash: totalAvailable, feesPaid: feeTotal });\r\n    calculateBalance(coinBalance, totalAvailable);\r\n    setTotalDeposits(deposits);\r\n    var timestamp = new Date(Date.now());\r\n    setStatusBarText(`Depositted $1000 at ${timestamp.toLocaleString()}`)\r\n  }\r\n\r\n  const handleWithdraw = async (value) => {\r\n    if (cashAvailable >= value) {\r\n      const totalAvailable = cashAvailable - value;\r\n      const deposits = totalDeposits - value;\r\n      setCashAvailable(totalAvailable);\r\n      saveCoinBalance({ balance: coinBalance, totalDeposits: deposits, cash: totalAvailable, feesPaid: feeTotal });\r\n      calculateBalance(coinBalance, totalAvailable);\r\n      setTotalDeposits(deposits);\r\n      var timestamp = new Date(Date.now());\r\n      setStatusBarText(`Withdrew $1000 at ${timestamp.toLocaleString()}`)\r\n    }\r\n  }\r\n  \r\n  const handleBuyMore = async (valueChangeTicker) => {\r\n    const foundCoin = coinBalance.find(coin => valueChangeTicker === coin.key);\r\n    setDialogTicker(foundCoin.ticker);\r\n    // setup modal\r\n    setActionTitle('Buy');\r\n    setModalTitle(`Buy ${foundCoin.ticker}`);\r\n    setInputTitle(`Spend cash available to purchase ${foundCoin.ticker}`);\r\n    setAvailability('Cash Available');\r\n    setInitialValue(0);\r\n    setQuantity(\"\");\r\n    setModalStatusMessage(buyMustBeGreaterThanZero);\r\n    setModalTextFieldStatus(false);\r\n    setBuyDialogOpen(true);\r\n  }\r\n  const updateModalTitles = (currentCoin) => {\r\n    if (currentCoin) {\r\n      setModalTitle(`Buy ${currentCoin.ticker}`);\r\n      setInputTitle(`Spend cash available to purchase ${currentCoin.ticker}`);\r\n    }\r\n    else {\r\n      setModalTitle(`Buy coins`);\r\n      setInputTitle(`Spend cash available to purchase coins`);\r\n    }\r\n  }\r\n  const selectCoin = (symbol) => {\r\n    var currentCoin = coinBalance.find(coin => symbol === coin.ticker);\r\n    // console.log(`selectCoin.symbol: ${symbol}`);\r\n    if (currentCoin === undefined) {\r\n      // console.log(`selectCoin: ${symbol} was not found, need to find it from the coinTicker`);\r\n      currentCoin = coinTicker.find(coin => symbol === coin.ticker);\r\n      // console.log(currentCoin);\r\n    }\r\n    updateModalTitles(currentCoin);\r\n    setDialogTicker(currentCoin.ticker);\r\n    return currentCoin;\r\n  }\r\n\r\n  const handleSellSome = async (valueChangeTicker) => {\r\n    const foundCoin = coinBalance.find(coin => valueChangeTicker === coin.key);\r\n    setDialogTicker(foundCoin.ticker);\r\n    // setup modal\r\n    setActionTitle('Sell');\r\n    setModalTitle(`Sell ${foundCoin.ticker}`);\r\n    setInputTitle(`Sell existing ${foundCoin.ticker} for cash`);\r\n    setAvailability('Shares Available');\r\n    setQuantity(\"\");\r\n    setInitialValue(0);\r\n    setModalStatusMessage(sellMustBeGreaterThanZero);\r\n    setModalTextFieldStatus(false);\r\n    setSellDialogOpen(true);\r\n  }\r\n\r\n  const handleBuyNew = async () => {\r\n    const ticker = dialogTicker ?? \"coins\";\r\n    // console.log(`handleBuyNew`);\r\n    setActionTitle('Buy');\r\n    setModalTitle(`Buy ${ticker}`);\r\n    setInputTitle(`Spend cash available to purchase ${ticker}`);\r\n    setAvailability('Cash Available');\r\n    setQuantity(\"\");\r\n    setInitialValue(0);\r\n    setModalStatusMessage(buyMustBeGreaterThanZero);\r\n    setModalTextFieldStatus(false);\r\n    setBuyNewDialogOpen(true);\r\n  }\r\n\r\n  const handleSettings = () => {\r\n    setSettingsDialogOpen(true);\r\n    setQuantity(feeRate);\r\n  }\r\n\r\n  const resetAllData = () => {\r\n    resetCoinTicker();\r\n    resetCoinBalance();\r\n    resetSettings();\r\n    reloadApp();\r\n    setStatusBarText(`All purchases/deposits have been erased`);\r\n  }\r\n\r\n  const resetCancelled = () => {\r\n  }\r\n\r\n  const handleReset = () => {\r\n    setShowAlert(true);\r\n    setSettingsDialogOpen(false);\r\n    setAlertHeading(\"Erase everything?\");\r\n    setAlertMessage(\"All of your purchases and deposits will be erased\");\r\n    setAlertButtonAcceptText(\"Erase\");\r\n    setAlertAcceptHandler({handler: resetAllData});\r\n    setAlertCancelHandler({handler: resetCancelled});\r\n  }\r\n\r\n  const handleAction = async (action, actionParameter) => {\r\n    switch (action) {\r\n      case ActionType.Reset:\r\n        handleReset(actionParameter);\r\n        break;\r\n      case ActionType.Settings:\r\n        handleSettings(actionParameter);  // opens SettingsDialog\r\n        break;\r\n      case ActionType.SaveSettings:\r\n        setFeeRate(actionParameter.feeRate);  // saves settings\r\n        saveSettings({ feeRate: actionParameter.feeRate });\r\n        break;\r\n      case ActionType.BuyMore:\r\n        handleBuyMore(actionParameter); // opens BuyDialog\r\n        break;\r\n      case ActionType.SellSome:\r\n        handleSellSome(actionParameter); // opens SellDialog\r\n        break;\r\n      case ActionType.ToggleBalance:\r\n        toggleBalance(actionParameter);\r\n        break;\r\n      case ActionType.Deposit:\r\n        handleDeposit(actionParameter);\r\n        break;\r\n      case ActionType.Withdraw:\r\n        handleWithdraw(actionParameter);\r\n        break;\r\n      case ActionType.BuyNew:\r\n        handleBuyNew(); // opens BuyNewDialog\r\n        break;\r\n      case ActionType.BuyShares:\r\n        buyShares(actionParameter.key, actionParameter.shares);\r\n        break;\r\n      case ActionType.SellShares:\r\n        sellShares(actionParameter.key, actionParameter.shares);\r\n        break;\r\n      case ActionType.Help:\r\n        showHelp();\r\n        break;\r\n      default:\r\n        throw Object.assign(new Error(`Unexpected action type: ${action}`), { code: 402 });\r\n    }\r\n  }\r\n\r\n  const showHelp = () => {\r\n    setHelpDialogOpen(true);\r\n  }\r\n\r\n  const sellShares = (key, quantity) => {\r\n    if (!dialogTicker) {\r\n      console.log(`Current ticker is null`);\r\n      return;\r\n    }\r\n    const changeCoin = coinBalance.find(coin => coin.ticker === dialogTicker);\r\n    if (!changeCoin) {\r\n      console.log(`${dialogTicker} wasn't found in coinBalance`);\r\n      return;\r\n    }\r\n    if (key !== changeCoin.key) {\r\n      console.log(`${key} doesn't match ${changeCoin.key}`);\r\n      return;\r\n    }\r\n    if (quantity > changeCoin.shares) {\r\n      console.log(`not enough ${changeCoin.ticker}`);\r\n      return;\r\n    }\r\n    const price = getPriceFromTicker(coinTicker, changeCoin.ticker);\r\n    var cost = quantity * price;\r\n    const sellFees = cost * feeRate;\r\n    // cost -= sellFees;\r\n    // const sellQuantity = cost / price;\r\n    const newCoinBalance = coinBalance.map(coin => {\r\n      if (coin.key === key) {\r\n        const newShares = coin.shares - quantity;\r\n        var newCoin = {...coin};\r\n        newCoin.costBasis = newShares > 0 ? (((coin.shares * coin.costBasis) - (quantity + sellFees)) / newShares) : 0;\r\n        newCoin.shares = newShares;\r\n        return newCoin;\r\n      }\r\n      return coin;\r\n    });\r\n    const cash = cashAvailable + (quantity * price) - sellFees;\r\n    const totalFeesPaid = feeTotal + sellFees;\r\n    setCashAvailable(cash);\r\n    calculateBalance(newCoinBalance, cash);\r\n    const statusText = `Sold ${quantity / price} shares of ${changeCoin.ticker} collecting $${quantity} paying $${sellFees} in fees`;\r\n    setFeeTotal(totalFeesPaid);\r\n    setStatusBarText(statusText);\r\n    console.log(statusText);\r\n    setCoinBalance(newCoinBalance);\r\n    saveCoinBalance({ balance: newCoinBalance, totalDeposits: totalDeposits, cash: cash, feesPaid: totalFeesPaid });\r\n  }\r\n\r\n  const buyShares = (key, quantity) => {\r\n    if (quantity > cashAvailable) {\r\n      console.log(`not enough cach`);\r\n      return;\r\n    }\r\n    var newCoinBalance;\r\n    var buyFees = quantity * feeRate;\r\n    var price;\r\n    quantity -= buyFees;\r\n    var purchaseCoin = coinBalance.find(coin => key === coin.key);\r\n    if (!purchaseCoin) {\r\n      const ticker = coinTicker.find(coin => key === coin.key);\r\n      if (!ticker) {\r\n        console.log(`ticker ${key} was not found`);\r\n        return;\r\n      }\r\n      \r\n      purchaseCoin = createCoinBalance(ticker);\r\n      price = getPriceFromTicker(coinTicker, purchaseCoin.ticker);\r\n      purchaseCoin.shares = quantity / price;\r\n      purchaseCoin.costBasis = price;\r\n      newCoinBalance = [...coinBalance];\r\n      newCoinBalance.push(purchaseCoin);\r\n    }\r\n    else {\r\n      price = getPriceFromTicker(coinTicker, purchaseCoin.ticker);\r\n      newCoinBalance = coinBalance.map(coin => {\r\n        if (coin.key === key) {\r\n          const newShares = quantity / price + coin.shares;\r\n          coin.costBasis = ((coin.shares * coin.costBasis) + quantity) / newShares;\r\n          coin.shares = newShares;\r\n          if (coin.shares === 0)\r\n            return null;\r\n        }\r\n        return coin;\r\n      });\r\n    }\r\n    const cash = cashAvailable - (quantity + buyFees);\r\n    const totalFeesPaid = feeTotal + buyFees;\r\n    setFeeTotal(totalFeesPaid);\r\n    setCashAvailable(cash);\r\n    calculateBalance(newCoinBalance, cash);\r\n    const statusText = `Purchased ${quantity / price} shares of ${purchaseCoin.ticker} spending $${quantity} paying $${buyFees} in fees`;\r\n    setStatusBarText(statusText);\r\n    console.log(statusText);\r\n    setCoinBalance(newCoinBalance);\r\n    saveCoinBalance({ balance: newCoinBalance, totalDeposits: totalDeposits, cash: cash, feesPaid: totalFeesPaid });\r\n  }\r\n\r\n  const buyMustBeGreaterThanZero = 'Amount to purchase must be greater than zero';\r\n  const sellMustBeGreaterThanZero = 'Number of shares to sell must be greater than zero';\r\n  const [modalStatusMessage, setModalStatusMessage] = React.useState(\"\");\r\n  const [modalTextFieldStatus, setModalTextFieldStatus] = React.useState(false);\r\n  const [modalTitle, setModalTitle] = React.useState(\"\");\r\n  const [inputTitle, setInputTitle] = React.useState(\"\");\r\n  const [actionTitle, setActionTitle] = React.useState(\"\");\r\n  const [availability, setAvailability] = React.useState(\"\");\r\n\r\n  const onSettingsValidator = (value) => {\r\n    setQuantity(value.feeRate);\r\n  }\r\n  const onModalSellValidator = (value) => {\r\n    const changeCoin = coinBalance.find(coin => coin.ticker === dialogTicker);\r\n    if (!changeCoin) {\r\n      console.log(`${dialogTicker} wasn't found in coinBalance`);\r\n      return;\r\n    }\r\n    setQuantity(value);\r\n    const amount = (value === undefined ? 0 : Number(value));\r\n    if (amount <= 0) {\r\n      setModalStatusMessage(sellMustBeGreaterThanZero);\r\n      setModalTextFieldStatus(false);\r\n    }\r\n    else if (amount > changeCoin.shares) {\r\n      setModalStatusMessage('Amount to sell exceeds shares available');\r\n      setModalTextFieldStatus(false);\r\n    }\r\n    else {\r\n      const price = getPriceFromTicker(coinTicker, changeCoin.ticker);\r\n      const shares = amount * price;\r\n      setModalStatusMessage(`Receive $${shares} for selling ${changeCoin.ticker}`);\r\n      setModalTextFieldStatus(true);\r\n    }\r\n  }\r\n  const onModalBuyValidator = (valueCoin) => {\r\n    const value = Number(valueCoin.quantity);\r\n    const coin = valueCoin.coin;\r\n    setQuantity(value);\r\n    const amount = (value === undefined ? 0 : Number(value));\r\n    if (amount <= 0) {\r\n      setModalStatusMessage(buyMustBeGreaterThanZero);\r\n      setModalTextFieldStatus(false);\r\n    }\r\n    else if (amount > cashAvailable) {\r\n      setModalStatusMessage('Amount to purchase exceeds cash available');\r\n      setModalTextFieldStatus(false);\r\n    }\r\n    else {\r\n      // console.log(JSON.stringify(coin));\r\n      const shares = amount / getPriceFromTicker(coinTicker, coin.ticker);\r\n      setModalStatusMessage(`Purchase ${shares} of ${coin.ticker}`);\r\n      setModalTextFieldStatus(true);\r\n    }\r\n    updateModalTitles(coin);\r\n  }\r\n\r\n  const sharesAvailableForSale = () => {\r\n    const changeCoin = coinBalance ? coinBalance.find(coin => coin.ticker === dialogTicker) : undefined;\r\n    return Boolean(!changeCoin) ? 0 : changeCoin.shares;\r\n  }\r\n  \r\n  return (\r\n    <div className=\"App\">\r\n      <ExchangeHeader />\r\n      <OverviewPanel\r\n        totalDeposits={totalDeposits}\r\n        netBalance={netBalance} \r\n        feesCollected={feeTotal}\r\n        feeRate={feeRate}\r\n        cashAvailable={cashAvailable} \r\n        showBalance={showBalance}\r\n        handleAction={handleAction} />\r\n      <CoinList\r\n        coinBalance={coinBalance} \r\n        coinTicker={coinTicker}\r\n        showBalance={showBalance} \r\n        handleAction={handleAction} />\r\n      <div className=\"status-bar\">\r\n        <div>Status: </div>\r\n        <div className=\"status-bar-message\">{statusBarText}</div>\r\n      </div>\r\n      <BuyDialog show={isBuyDialogOpen} \r\n        cashSharesAvailable={cashAvailable} \r\n        dialogTicker={dialogTicker}\r\n        coinBalance={coinBalance} \r\n        coinTicker={coinTicker}\r\n        quantity={quantity}\r\n        initialValue={initialValue}\r\n        modalStatusMessage={modalStatusMessage}\r\n        modalTextFieldStatus={modalTextFieldStatus}\r\n        onValidator={onModalBuyValidator}\r\n        modalTitle={modalTitle}\r\n        inputTitle={inputTitle}\r\n        actionTitle={actionTitle}\r\n        availability={availability}\r\n        prefix=\"$\"\r\n        handleAction={handleAction}\r\n        handleClose={closeBuyDialog}/>\r\n      <SellDialog show={isSellDialogOpen} \r\n        cashSharesAvailable={sharesAvailableForSale()} \r\n        coinBalance={coinBalance} \r\n        coinTicker={coinTicker}\r\n        dialogTicker={dialogTicker}\r\n        quantity={quantity}\r\n        initialValue={initialValue}\r\n        modalStatusMessage={modalStatusMessage}\r\n        modalTextFieldStatus={modalTextFieldStatus}\r\n        onValidator={onModalSellValidator}\r\n        modalTitle={modalTitle}\r\n        inputTitle={inputTitle}\r\n        actionTitle={actionTitle}\r\n        availability={availability}\r\n        handleAction={handleAction}\r\n        handleClose={closeSellDialog}/>\r\n      <BuyNewDialog show={isBuyNewDialogOpen}\r\n        cashSharesAvailable={cashAvailable} \r\n        coinBalance={coinBalance} \r\n        coinTicker={coinTicker}\r\n        dialogTicker={dialogTicker}\r\n        modalStatusMessage={modalStatusMessage}\r\n        modalTextFieldStatus={modalTextFieldStatus}\r\n        onValidator={onModalBuyValidator}\r\n        modalTitle={modalTitle}\r\n        inputTitle={inputTitle}\r\n        actionTitle={actionTitle}\r\n        availability={availability}\r\n        selectCoin={selectCoin}\r\n        quantity={quantity}\r\n        handleAction={handleAction}\r\n        handleClose={closeBuyNewDialog}/>\r\n      <LoadingDialog show={isLoadingDialogOpen === LoadingState.Displayed}\r\n        coinBalance={coinBalance}\r\n        coinTicker={coinTicker}\r\n        settings={{feeRate: feeRate}}\r\n        modalTitle=\"Loading values\"\r\n        handleReload={onReloadLoadingDialog}\r\n        handleClose={closeLoadingDialog}/>\r\n      <SettingsDialog show={isSettingsDialogOpen} \r\n        modalTitle=\"Settings\"\r\n        inputTitle=\"Paper Coin Exchange Settings\"\r\n        settings={{feeRate: quantity}}\r\n        onValidator={onSettingsValidator}\r\n        handleAction={handleAction}\r\n        handleClose={closeSettingsDialog} />\r\n      <AlertDialog\r\n        alertHeading={alertHeading}\r\n        alertMessage={alertMessage}\r\n        alertButtonAcceptText={alertButtonAcceptText}\r\n        alertAcceptHandler={alertAcceptHandler}\r\n        alertCancelHandler={alertCancelHandler}\r\n        show={showAlert}\r\n        handleClose={closeAlertDialog}/>\r\n      <HelpDialog show={isHelpDialogOpen}\r\n        handleAction={handleAction}\r\n        totalDeposits={totalDeposits}\r\n        netBalance={netBalance}\r\n        showBalance={showBalance}\r\n        handleClose={closeHelpDialog}/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}